// generated file
'use strict';
define(["require", "exports"], function (require, exports) {
     exports.snippets = [

{  "type": "function",  "label": "add_compile_options",  "documentationLabel": "Adds options to the compilation of source files.",  "codeSnippet": "add_compile_options({{}})" },
{  "type": "function",  "label": "add_custom_command",  "documentationLabel": "Add a custom build rule to the generated build system.",  "codeSnippet": "add_custom_command({{}})" },
{  "type": "function",  "label": "add_custom_target",  "documentationLabel": "Add a target with no output so it will always be built.",  "codeSnippet": "add_custom_target({{}})" },
{  "type": "function",  "label": "add_definitions",  "documentationLabel": "Adds -D define flags to the compilation of source files.",  "codeSnippet": "add_definitions({{}})" },
{  "type": "function",  "label": "add_dependencies",  "documentationLabel": "Add a dependency between top-level targets.",  "codeSnippet": "add_dependencies({{}})" },
{  "type": "function",  "label": "add_executable",  "documentationLabel": "Add an executable to the project using the specified source files.",  "codeSnippet": "add_executable({{}})" },
{  "type": "function",  "label": "add_library",  "documentationLabel": "Add a library to the project using the specified source files.",  "codeSnippet": "add_library({{}})" },
{  "type": "function",  "label": "add_subdirectory",  "documentationLabel": "Add a subdirectory to the build.",  "codeSnippet": "add_subdirectory({{}})" },
{  "type": "function",  "label": "add_test",  "documentationLabel": "Add a test to the project to be run by ``ctest(1)``.",  "codeSnippet": "add_test({{}})" },
{  "type": "function",  "label": "aux_source_directory",  "documentationLabel": "Find all source files in a directory.",  "codeSnippet": "aux_source_directory({{}})" },
{  "type": "function",  "label": "break",  "documentationLabel": "Break from an enclosing foreach or while loop.",  "codeSnippet": "break({{}})" },
{  "type": "function",  "label": "build_command",  "documentationLabel": "Get a command line to build the current project.",  "codeSnippet": "build_command({{}})" },
{  "type": "function",  "label": "build_name",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0036``.",  "codeSnippet": "build_name({{}})" },
{  "type": "function",  "label": "cmake_host_system_information",  "documentationLabel": "Query host system specific information.",  "codeSnippet": "cmake_host_system_information({{}})" },
{  "type": "function",  "label": "cmake_minimum_required",  "documentationLabel": "Set the minimum required version of cmake for a project.",  "codeSnippet": "cmake_minimum_required({{}})" },
{  "type": "function",  "label": "cmake_policy",  "documentationLabel": "Manage CMake Policy settings.  See the ``cmake-policies(7)``",  "codeSnippet": "cmake_policy({{}})" },
{  "type": "function",  "label": "configure_file",  "documentationLabel": "Copy a file to another location and modify its contents.",  "codeSnippet": "configure_file({{}})" },
{  "type": "function",  "label": "continue",  "documentationLabel": "Continue to the top of enclosing foreach or while loop.",  "codeSnippet": "continue({{}})" },
{  "type": "function",  "label": "create_test_sourcelist",  "documentationLabel": "Create a test driver and source list for building test programs.",  "codeSnippet": "create_test_sourcelist({{}})" },
{  "type": "function",  "label": "ctest_build",  "documentationLabel": "Build the project.",  "codeSnippet": "ctest_build({{}})" },
{  "type": "function",  "label": "ctest_configure",  "documentationLabel": "Configure the project build tree.",  "codeSnippet": "ctest_configure({{}})" },
{  "type": "function",  "label": "ctest_coverage",  "documentationLabel": "Collect coverage tool results.",  "codeSnippet": "ctest_coverage({{}})" },
{  "type": "function",  "label": "ctest_empty_binary_directory",  "documentationLabel": "empties the binary directory",  "codeSnippet": "ctest_empty_binary_directory({{}})" },
{  "type": "function",  "label": "ctest_memcheck",  "documentationLabel": "Run tests with a dynamic analysis tool.",  "codeSnippet": "ctest_memcheck({{}})" },
{  "type": "function",  "label": "ctest_read_custom_files",  "documentationLabel": "read CTestCustom files.",  "codeSnippet": "ctest_read_custom_files({{}})" },
{  "type": "function",  "label": "ctest_run_script",  "documentationLabel": "runs a ctest -S script",  "codeSnippet": "ctest_run_script({{}})" },
{  "type": "function",  "label": "ctest_sleep",  "documentationLabel": "sleeps for some amount of time",  "codeSnippet": "ctest_sleep({{}})" },
{  "type": "function",  "label": "ctest_start",  "documentationLabel": "Starts the testing for a given model",  "codeSnippet": "ctest_start({{}})" },
{  "type": "function",  "label": "ctest_submit",  "documentationLabel": "Submit results to a dashboard server.",  "codeSnippet": "ctest_submit({{}})" },
{  "type": "function",  "label": "ctest_test",  "documentationLabel": "Run tests in the project build tree.",  "codeSnippet": "ctest_test({{}})" },
{  "type": "function",  "label": "ctest_update",  "documentationLabel": "Update the work tree from version control.",  "codeSnippet": "ctest_update({{}})" },
{  "type": "function",  "label": "ctest_upload",  "documentationLabel": "Upload files to a dashboard server.",  "codeSnippet": "ctest_upload({{}})" },
{  "type": "function",  "label": "define_property",  "documentationLabel": "Define and document custom properties.",  "codeSnippet": "define_property({{}})" },
{  "type": "function",  "label": "else",  "documentationLabel": "Starts the else portion of an if block.",  "codeSnippet": "else({{}})" },
{  "type": "function",  "label": "elseif",  "documentationLabel": "Starts the elseif portion of an if block.",  "codeSnippet": "elseif({{}})" },
{  "type": "function",  "label": "enable_language",  "documentationLabel": "Enable a language (CXX/C/Fortran/etc)",  "codeSnippet": "enable_language({{}})" },
{  "type": "function",  "label": "enable_testing",  "documentationLabel": "Enable testing for current directory and below.",  "codeSnippet": "enable_testing({{}})" },
{  "type": "function",  "label": "endforeach",  "documentationLabel": "Ends a list of commands in a FOREACH block.",  "codeSnippet": "endforeach({{}})" },
{  "type": "function",  "label": "endfunction",  "documentationLabel": "Ends a list of commands in a function block.",  "codeSnippet": "endfunction({{}})" },
{  "type": "function",  "label": "endif",  "documentationLabel": "Ends a list of commands in an if block.",  "codeSnippet": "endif({{}})" },
{  "type": "function",  "label": "endmacro",  "documentationLabel": "Ends a list of commands in a macro block.",  "codeSnippet": "endmacro({{}})" },
{  "type": "function",  "label": "endwhile",  "documentationLabel": "Ends a list of commands in a while block.",  "codeSnippet": "endwhile({{}})" },
{  "type": "function",  "label": "exec_program",  "documentationLabel": "Deprecated.  Use the execute_process() command instead.",  "codeSnippet": "exec_program({{}})" },
{  "type": "function",  "label": "execute_process",  "documentationLabel": "Execute one or more child processes.",  "codeSnippet": "execute_process({{}})" },
{  "type": "function",  "label": "export",  "documentationLabel": "Export targets from the build tree for use by outside projects.",  "codeSnippet": "export({{}})" },
{  "type": "function",  "label": "export_library_dependencies",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0033``.",  "codeSnippet": "export_library_dependencies({{}})" },
{  "type": "function",  "label": "file",  "documentationLabel": "File manipulation command.",  "codeSnippet": "file({{}})" },
{  "type": "function",  "label": "find_file",  "documentationLabel": "A short-hand signature is:",  "codeSnippet": "find_file({{}})" },
{  "type": "function",  "label": "find_library",  "documentationLabel": "A short-hand signature is:",  "codeSnippet": "find_library({{}})" },
{  "type": "function",  "label": "find_package",  "documentationLabel": "Load settings for an external project.",  "codeSnippet": "find_package({{}})" },
{  "type": "function",  "label": "find_path",  "documentationLabel": "A short-hand signature is:",  "codeSnippet": "find_path({{}})" },
{  "type": "function",  "label": "find_program",  "documentationLabel": "A short-hand signature is:",  "codeSnippet": "find_program({{}})" },
{  "type": "function",  "label": "fltk_wrap_ui",  "documentationLabel": "Create FLTK user interfaces Wrappers.",  "codeSnippet": "fltk_wrap_ui({{}})" },
{  "type": "function",  "label": "foreach",  "documentationLabel": "Evaluate a group of commands for each value in a list.",  "codeSnippet": "foreach({{}})" },
{  "type": "function",  "label": "function",  "documentationLabel": "Start recording a function for later invocation as a command.",  "codeSnippet": "function({{}})" },
{  "type": "function",  "label": "get_cmake_property",  "documentationLabel": "Get a property of the CMake instance.",  "codeSnippet": "get_cmake_property({{}})" },
{  "type": "function",  "label": "get_directory_property",  "documentationLabel": "Get a property of DIRECTORY scope.",  "codeSnippet": "get_directory_property({{}})" },
{  "type": "function",  "label": "get_filename_component",  "documentationLabel": "Get a specific component of a full filename.",  "codeSnippet": "get_filename_component({{}})" },
{  "type": "function",  "label": "get_property",  "documentationLabel": "Get a property.",  "codeSnippet": "get_property({{}})" },
{  "type": "function",  "label": "get_source_file_property",  "documentationLabel": "Get a property for a source file.",  "codeSnippet": "get_source_file_property({{}})" },
{  "type": "function",  "label": "get_target_property",  "documentationLabel": "Get a property from a target.",  "codeSnippet": "get_target_property({{}})" },
{  "type": "function",  "label": "get_test_property",  "documentationLabel": "Get a property of the test.",  "codeSnippet": "get_test_property({{}})" },
{  "type": "function",  "label": "if",  "documentationLabel": "Conditionally execute a group of commands.",  "codeSnippet": "if({{}})" },
{  "type": "function",  "label": "include",  "documentationLabel": "Load and run CMake code from a file or module.",  "codeSnippet": "include({{}})" },
{  "type": "function",  "label": "include_directories",  "documentationLabel": "Add include directories to the build.",  "codeSnippet": "include_directories({{}})" },
{  "type": "function",  "label": "include_external_msproject",  "documentationLabel": "Include an external Microsoft project file in a workspace.",  "codeSnippet": "include_external_msproject({{}})" },
{  "type": "function",  "label": "include_regular_expression",  "documentationLabel": "Set the regular expression used for dependency checking.",  "codeSnippet": "include_regular_expression({{}})" },
{  "type": "function",  "label": "install",  "documentationLabel": "Specify rules to run at install time.",  "codeSnippet": "install({{}})" },
{  "type": "function",  "label": "install_files",  "documentationLabel": "Deprecated.  Use the install(FILES ) command instead.",  "codeSnippet": "install_files({{}})" },
{  "type": "function",  "label": "install_programs",  "documentationLabel": "Deprecated. Use the install(PROGRAMS ) command instead.",  "codeSnippet": "install_programs({{}})" },
{  "type": "function",  "label": "install_targets",  "documentationLabel": "Deprecated. Use the install(TARGETS )  command instead.",  "codeSnippet": "install_targets({{}})" },
{  "type": "function",  "label": "link_directories",  "documentationLabel": "Specify directories in which the linker will look for libraries.",  "codeSnippet": "link_directories({{}})" },
{  "type": "function",  "label": "link_libraries",  "documentationLabel": "Link libraries to all targets added later.",  "codeSnippet": "link_libraries({{}})" },
{  "type": "function",  "label": "list",  "documentationLabel": "List operations.",  "codeSnippet": "list({{}})" },
{  "type": "function",  "label": "load_cache",  "documentationLabel": "Load in the values from another project's CMake cache.",  "codeSnippet": "load_cache({{}})" },
{  "type": "function",  "label": "load_command",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0031``.",  "codeSnippet": "load_command({{}})" },
{  "type": "function",  "label": "macro",  "documentationLabel": "Start recording a macro for later invocation as a command.",  "codeSnippet": "macro({{}})" },
{  "type": "function",  "label": "make_directory",  "documentationLabel": "Deprecated. Use the file(MAKE_DIRECTORY ) command instead.",  "codeSnippet": "make_directory({{}})" },
{  "type": "function",  "label": "mark_as_advanced",  "documentationLabel": "Mark cmake cached variables as advanced.",  "codeSnippet": "mark_as_advanced({{}})" },
{  "type": "function",  "label": "math",  "documentationLabel": "Mathematical expressions.",  "codeSnippet": "math({{}})" },
{  "type": "function",  "label": "message",  "documentationLabel": "Display a message to the user.",  "codeSnippet": "message({{}})" },
{  "type": "function",  "label": "option",  "documentationLabel": "Provides an option that the user can optionally select.",  "codeSnippet": "option({{}})" },
{  "type": "function",  "label": "output_required_files",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0032``.",  "codeSnippet": "output_required_files({{}})" },
{  "type": "function",  "label": "project",  "documentationLabel": "Set a name, version, and enable languages for the entire project.",  "codeSnippet": "project({{}})" },
{  "type": "function",  "label": "qt_wrap_cpp",  "documentationLabel": "Create Qt Wrappers.",  "codeSnippet": "qt_wrap_cpp({{}})" },
{  "type": "function",  "label": "qt_wrap_ui",  "documentationLabel": "Create Qt user interfaces Wrappers.",  "codeSnippet": "qt_wrap_ui({{}})" },
{  "type": "function",  "label": "remove",  "documentationLabel": "Deprecated. Use the list(REMOVE_ITEM ) command instead.",  "codeSnippet": "remove({{}})" },
{  "type": "function",  "label": "remove_definitions",  "documentationLabel": "Removes -D define flags added by add_definitions.",  "codeSnippet": "remove_definitions({{}})" },
{  "type": "function",  "label": "return",  "documentationLabel": "Return from a file, directory or function.",  "codeSnippet": "return({{}})" },
{  "type": "function",  "label": "separate_arguments",  "documentationLabel": "Parse space-separated arguments into a semicolon-separated list.",  "codeSnippet": "separate_arguments({{}})" },
{  "type": "function",  "label": "set",  "documentationLabel": "Set a CMake, cache or environment variable to a given value.",  "codeSnippet": "set({{}})" },
{  "type": "function",  "label": "set_directory_properties",  "documentationLabel": "Set a property of the directory.",  "codeSnippet": "set_directory_properties({{}})" },
{  "type": "function",  "label": "set_property",  "documentationLabel": "Set a named property in a given scope.",  "codeSnippet": "set_property({{}})" },
{  "type": "function",  "label": "set_source_files_properties",  "documentationLabel": "Source files can have properties that affect how they are built.",  "codeSnippet": "set_source_files_properties({{}})" },
{  "type": "function",  "label": "set_target_properties",  "documentationLabel": "Targets can have properties that affect how they are built.",  "codeSnippet": "set_target_properties({{}})" },
{  "type": "function",  "label": "set_tests_properties",  "documentationLabel": "Set a property of the tests.",  "codeSnippet": "set_tests_properties({{}})" },
{  "type": "function",  "label": "site_name",  "documentationLabel": "Set the given variable to the name of the computer.",  "codeSnippet": "site_name({{}})" },
{  "type": "function",  "label": "source_group",  "documentationLabel": "Define a grouping for source files in IDE project generation.",  "codeSnippet": "source_group({{}})" },
{  "type": "function",  "label": "string",  "documentationLabel": "String operations.",  "codeSnippet": "string({{}})" },
{  "type": "function",  "label": "subdir_depends",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0029``.",  "codeSnippet": "subdir_depends({{}})" },
{  "type": "function",  "label": "subdirs",  "documentationLabel": "Deprecated. Use the add_subdirectory() command instead.",  "codeSnippet": "subdirs({{}})" },
{  "type": "function",  "label": "target_compile_definitions",  "documentationLabel": "Add compile definitions to a target.",  "codeSnippet": "target_compile_definitions({{}})" },
{  "type": "function",  "label": "target_compile_features",  "documentationLabel": "Add expected compiler features to a target.",  "codeSnippet": "target_compile_features({{}})" },
{  "type": "function",  "label": "target_compile_options",  "documentationLabel": "Add compile options to a target.",  "codeSnippet": "target_compile_options({{}})" },
{  "type": "function",  "label": "target_include_directories",  "documentationLabel": "Add include directories to a target.",  "codeSnippet": "target_include_directories({{}})" },
{  "type": "function",  "label": "target_link_libraries",  "documentationLabel": "Link a target to given libraries.",  "codeSnippet": "target_link_libraries({{}})" },
{  "type": "function",  "label": "target_sources",  "documentationLabel": "Add sources to a target.",  "codeSnippet": "target_sources({{}})" },
{  "type": "function",  "label": "try_compile",  "documentationLabel": "Try building some code.",  "codeSnippet": "try_compile({{}})" },
{  "type": "function",  "label": "try_run",  "documentationLabel": "Try compiling and then running some code.",  "codeSnippet": "try_run({{}})" },
{  "type": "function",  "label": "unset",  "documentationLabel": "Unset a variable, cache variable, or environment variable.",  "codeSnippet": "unset({{}})" },
{  "type": "function",  "label": "use_mangled_mesa",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0030``.",  "codeSnippet": "use_mangled_mesa({{}})" },
{  "type": "function",  "label": "utility_source",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0034``.",  "codeSnippet": "utility_source({{}})" },
{  "type": "function",  "label": "variable_requires",  "documentationLabel": "Disallowed.  See CMake Policy ``CMP0035``.",  "codeSnippet": "variable_requires({{}})" },
{  "type": "function",  "label": "variable_watch",  "documentationLabel": "Watch the CMake variable for change.",  "codeSnippet": "variable_watch({{}})" },
{  "type": "function",  "label": "while",  "documentationLabel": "Evaluate a group of commands while a condition is true",  "codeSnippet": "while({{}})" },
{  "type": "function",  "label": "write_file",  "documentationLabel": "Deprecated. Use the file(WRITE ) command instead.",  "codeSnippet": "write_file({{}})" },
{  "type": "variable",  "label": "<PROJECT-NAME>_BINARY_DIR",  "documentationLabel": "Top level binary directory for the named project.",  "codeSnippet": "<PROJECT-NAME>_BINARY_DIR" },
{  "type": "variable",  "label": "<PROJECT-NAME>_SOURCE_DIR",  "documentationLabel": "Top level source directory for the named project.",  "codeSnippet": "<PROJECT-NAME>_SOURCE_DIR" },
{  "type": "variable",  "label": "<PROJECT-NAME>_VERSION",  "documentationLabel": "Value given to the ``VERSION`` option of the most recent call to the",  "codeSnippet": "<PROJECT-NAME>_VERSION" },
{  "type": "variable",  "label": "<PROJECT-NAME>_VERSION_MAJOR",  "documentationLabel": "First version number component of the ``<PROJECT-NAME>_VERSION``",  "codeSnippet": "<PROJECT-NAME>_VERSION_MAJOR" },
{  "type": "variable",  "label": "<PROJECT-NAME>_VERSION_MINOR",  "documentationLabel": "Second version number component of the ``<PROJECT-NAME>_VERSION``",  "codeSnippet": "<PROJECT-NAME>_VERSION_MINOR" },
{  "type": "variable",  "label": "<PROJECT-NAME>_VERSION_PATCH",  "documentationLabel": "Third version number component of the ``<PROJECT-NAME>_VERSION``",  "codeSnippet": "<PROJECT-NAME>_VERSION_PATCH" },
{  "type": "variable",  "label": "<PROJECT-NAME>_VERSION_TWEAK",  "documentationLabel": "Fourth version number component of the ``<PROJECT-NAME>_VERSION``",  "codeSnippet": "<PROJECT-NAME>_VERSION_TWEAK" },
{  "type": "variable",  "label": "APPLE",  "documentationLabel": "True if running on Mac OS X.",  "codeSnippet": "APPLE" },
{  "type": "variable",  "label": "BORLAND",  "documentationLabel": "True if the Borland compiler is being used.",  "codeSnippet": "BORLAND" },
{  "type": "variable",  "label": "BUILD_SHARED_LIBS",  "documentationLabel": "Global flag to cause add_library to create shared libraries if on.",  "codeSnippet": "BUILD_SHARED_LIBS" },
{  "type": "variable",  "label": "CMAKE_<CONFIG>_POSTFIX",  "documentationLabel": "Default filename postfix for libraries under configuration <CONFIG>.",  "codeSnippet": "CMAKE_<CONFIG>_POSTFIX" },
{  "type": "variable",  "label": "CMAKE_<LANG>_ARCHIVE_APPEND",  "documentationLabel": "Rule variable to append to a static archive.",  "codeSnippet": "CMAKE_<LANG>_ARCHIVE_APPEND" },
{  "type": "variable",  "label": "CMAKE_<LANG>_ARCHIVE_CREATE",  "documentationLabel": "Rule variable to create a new static archive.",  "codeSnippet": "CMAKE_<LANG>_ARCHIVE_CREATE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_ARCHIVE_FINISH",  "documentationLabel": "Rule variable to finish an existing static archive.",  "codeSnippet": "CMAKE_<LANG>_ARCHIVE_FINISH" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER",  "documentationLabel": "The full path to the compiler for LANG.",  "codeSnippet": "CMAKE_<LANG>_COMPILER" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_ABI",  "documentationLabel": "An internal variable subject to change.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_ABI" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN",  "documentationLabel": "The external toolchain for cross-compiling, if supported.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_ID",  "documentationLabel": "Compiler identification string.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_ID" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_LOADED",  "documentationLabel": "Defined to true if the language is enabled.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_LOADED" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_TARGET",  "documentationLabel": "The target for cross-compiling, if supported.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_TARGET" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILER_VERSION",  "documentationLabel": "Compiler version string.",  "codeSnippet": "CMAKE_<LANG>_COMPILER_VERSION" },
{  "type": "variable",  "label": "CMAKE_<LANG>_COMPILE_OBJECT",  "documentationLabel": "Rule variable to compile a single object file.",  "codeSnippet": "CMAKE_<LANG>_COMPILE_OBJECT" },
{  "type": "variable",  "label": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY",  "documentationLabel": "Rule variable to create a shared library.",  "codeSnippet": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY" },
{  "type": "variable",  "label": "CMAKE_<LANG>_CREATE_SHARED_MODULE",  "documentationLabel": "Rule variable to create a shared module.",  "codeSnippet": "CMAKE_<LANG>_CREATE_SHARED_MODULE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY",  "documentationLabel": "Rule variable to create a static library.",  "codeSnippet": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY" },
{  "type": "variable",  "label": "CMAKE_<LANG>_FLAGS",  "documentationLabel": "Flags for all build types.",  "codeSnippet": "CMAKE_<LANG>_FLAGS" },
{  "type": "variable",  "label": "CMAKE_<LANG>_FLAGS_DEBUG",  "documentationLabel": "Flags for Debug build type or configuration.",  "codeSnippet": "CMAKE_<LANG>_FLAGS_DEBUG" },
{  "type": "variable",  "label": "CMAKE_<LANG>_FLAGS_MINSIZEREL",  "documentationLabel": "Flags for MinSizeRel build type or configuration.",  "codeSnippet": "CMAKE_<LANG>_FLAGS_MINSIZEREL" },
{  "type": "variable",  "label": "CMAKE_<LANG>_FLAGS_RELEASE",  "documentationLabel": "Flags for Release build type or configuration.",  "codeSnippet": "CMAKE_<LANG>_FLAGS_RELEASE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO",  "documentationLabel": "Flags for RelWithDebInfo type or configuration.",  "codeSnippet": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO" },
{  "type": "variable",  "label": "CMAKE_<LANG>_IGNORE_EXTENSIONS",  "documentationLabel": "File extensions that should be ignored by the build.",  "codeSnippet": "CMAKE_<LANG>_IGNORE_EXTENSIONS" },
{  "type": "variable",  "label": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES",  "documentationLabel": "Directories implicitly searched by the compiler for header files.",  "codeSnippet": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES" },
{  "type": "variable",  "label": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES",  "documentationLabel": "Implicit linker search path detected for language <LANG>.",  "codeSnippet": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES" },
{  "type": "variable",  "label": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",  "documentationLabel": "Implicit linker framework search path detected for language <LANG>.",  "codeSnippet": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES" },
{  "type": "variable",  "label": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES",  "documentationLabel": "Implicit link libraries and flags detected for language <LANG>.",  "codeSnippet": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES" },
{  "type": "variable",  "label": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE",  "documentationLabel": "Target architecture library directory name detected for <lang>.",  "codeSnippet": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_LINKER_PREFERENCE",  "documentationLabel": "Preference value for linker language selection.",  "codeSnippet": "CMAKE_<LANG>_LINKER_PREFERENCE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES",  "documentationLabel": "True if CMAKE_<LANG>_LINKER_PREFERENCE propagates across targets.",  "codeSnippet": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES" },
{  "type": "variable",  "label": "CMAKE_<LANG>_LINK_EXECUTABLE",  "documentationLabel": "Rule variable to link an executable.",  "codeSnippet": "CMAKE_<LANG>_LINK_EXECUTABLE" },
{  "type": "variable",  "label": "CMAKE_<LANG>_OUTPUT_EXTENSION",  "documentationLabel": "Extension for the output of a compile for a single file.",  "codeSnippet": "CMAKE_<LANG>_OUTPUT_EXTENSION" },
{  "type": "variable",  "label": "CMAKE_<LANG>_PLATFORM_ID",  "documentationLabel": "An internal variable subject to change.",  "codeSnippet": "CMAKE_<LANG>_PLATFORM_ID" },
{  "type": "variable",  "label": "CMAKE_<LANG>_SIMULATE_ID",  "documentationLabel": "Identification string of 'simulated' compiler.",  "codeSnippet": "CMAKE_<LANG>_SIMULATE_ID" },
{  "type": "variable",  "label": "CMAKE_<LANG>_SIMULATE_VERSION",  "documentationLabel": "Version string of 'simulated' compiler.",  "codeSnippet": "CMAKE_<LANG>_SIMULATE_VERSION" },
{  "type": "variable",  "label": "CMAKE_<LANG>_SIZEOF_DATA_PTR",  "documentationLabel": "Size of pointer-to-data types for language <LANG>.",  "codeSnippet": "CMAKE_<LANG>_SIZEOF_DATA_PTR" },
{  "type": "variable",  "label": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS",  "documentationLabel": "Extensions of source files for the given language.",  "codeSnippet": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS" },
{  "type": "variable",  "label": "CMAKE_<LANG>_VISIBILITY_PRESET",  "documentationLabel": "Default value for <LANG>_VISIBILITY_PRESET of targets.",  "codeSnippet": "CMAKE_<LANG>_VISIBILITY_PRESET" },
{  "type": "variable",  "label": "CMAKE_ABSOLUTE_DESTINATION_FILES",  "documentationLabel": "List of files which have been installed using  an ABSOLUTE DESTINATION path.",  "codeSnippet": "CMAKE_ABSOLUTE_DESTINATION_FILES" },
{  "type": "variable",  "label": "CMAKE_ANDROID_API",  "documentationLabel": "Default value for the ``ANDROID_API`` target property.",  "codeSnippet": "CMAKE_ANDROID_API" },
{  "type": "variable",  "label": "CMAKE_ANDROID_API_MIN",  "documentationLabel": "Default value for the ``ANDROID_API_MIN`` target property.",  "codeSnippet": "CMAKE_ANDROID_API_MIN" },
{  "type": "variable",  "label": "CMAKE_ANDROID_GUI",  "documentationLabel": "Default value for the ``ANDROID_GUI`` target property of",  "codeSnippet": "CMAKE_ANDROID_GUI" },
{  "type": "variable",  "label": "CMAKE_APPBUNDLE_PATH",  "documentationLabel": "Search path for OS X application bundles used by the ``find_program()``,",  "codeSnippet": "CMAKE_APPBUNDLE_PATH" },
{  "type": "variable",  "label": "CMAKE_AR",  "documentationLabel": "Name of archiving tool for static libraries.",  "codeSnippet": "CMAKE_AR" },
{  "type": "variable",  "label": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",  "documentationLabel": "Where to put all the ARCHIVE targets when built.",  "codeSnippet": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_ARGC",  "documentationLabel": "Number of command line arguments passed to CMake in script mode.",  "codeSnippet": "CMAKE_ARGC" },
{  "type": "variable",  "label": "CMAKE_ARGV0",  "documentationLabel": "Command line argument passed to CMake in script mode.",  "codeSnippet": "CMAKE_ARGV0" },
{  "type": "variable",  "label": "CMAKE_AUTOMOC",  "documentationLabel": "Whether to handle ``moc`` automatically for Qt targets.",  "codeSnippet": "CMAKE_AUTOMOC" },
{  "type": "variable",  "label": "CMAKE_AUTOMOC_MOC_OPTIONS",  "documentationLabel": "Additional options for ``moc`` when using ``CMAKE_AUTOMOC``.",  "codeSnippet": "CMAKE_AUTOMOC_MOC_OPTIONS" },
{  "type": "variable",  "label": "CMAKE_AUTOMOC_RELAXED_MODE",  "documentationLabel": "Switch between strict and relaxed automoc mode.",  "codeSnippet": "CMAKE_AUTOMOC_RELAXED_MODE" },
{  "type": "variable",  "label": "CMAKE_AUTORCC",  "documentationLabel": "Whether to handle ``rcc`` automatically for Qt targets.",  "codeSnippet": "CMAKE_AUTORCC" },
{  "type": "variable",  "label": "CMAKE_AUTORCC_OPTIONS",  "documentationLabel": "Whether to handle ``rcc`` automatically for Qt targets.",  "codeSnippet": "CMAKE_AUTORCC_OPTIONS" },
{  "type": "variable",  "label": "CMAKE_AUTOUIC",  "documentationLabel": "Whether to handle ``uic`` automatically for Qt targets.",  "codeSnippet": "CMAKE_AUTOUIC" },
{  "type": "variable",  "label": "CMAKE_AUTOUIC_OPTIONS",  "documentationLabel": "Whether to handle ``uic`` automatically for Qt targets.",  "codeSnippet": "CMAKE_AUTOUIC_OPTIONS" },
{  "type": "variable",  "label": "CMAKE_BACKWARDS_COMPATIBILITY",  "documentationLabel": "Deprecated.  See CMake Policy ``CMP0001`` documentation.",  "codeSnippet": "CMAKE_BACKWARDS_COMPATIBILITY" },
{  "type": "variable",  "label": "CMAKE_BINARY_DIR",  "documentationLabel": "The path to the top level of the build tree.",  "codeSnippet": "CMAKE_BINARY_DIR" },
{  "type": "variable",  "label": "CMAKE_BUILD_TOOL",  "documentationLabel": "This variable exists only for backwards compatibility.",  "codeSnippet": "CMAKE_BUILD_TOOL" },
{  "type": "variable",  "label": "CMAKE_BUILD_TYPE",  "documentationLabel": "Specifies the build type on single-configuration generators.",  "codeSnippet": "CMAKE_BUILD_TYPE" },
{  "type": "variable",  "label": "CMAKE_BUILD_WITH_INSTALL_RPATH",  "documentationLabel": "Use the install path for the RPATH",  "codeSnippet": "CMAKE_BUILD_WITH_INSTALL_RPATH" },
{  "type": "variable",  "label": "CMAKE_CACHEFILE_DIR",  "documentationLabel": "The directory with the CMakeCache.txt file.",  "codeSnippet": "CMAKE_CACHEFILE_DIR" },
{  "type": "variable",  "label": "CMAKE_CACHE_MAJOR_VERSION",  "documentationLabel": "Major version of CMake used to create the CMakeCache.txt file",  "codeSnippet": "CMAKE_CACHE_MAJOR_VERSION" },
{  "type": "variable",  "label": "CMAKE_CACHE_MINOR_VERSION",  "documentationLabel": "Minor version of CMake used to create the CMakeCache.txt file",  "codeSnippet": "CMAKE_CACHE_MINOR_VERSION" },
{  "type": "variable",  "label": "CMAKE_CACHE_PATCH_VERSION",  "documentationLabel": "Patch version of CMake used to create the CMakeCache.txt file",  "codeSnippet": "CMAKE_CACHE_PATCH_VERSION" },
{  "type": "variable",  "label": "CMAKE_CFG_INTDIR",  "documentationLabel": "Build-time reference to per-configuration output subdirectory.",  "codeSnippet": "CMAKE_CFG_INTDIR" },
{  "type": "variable",  "label": "CMAKE_CL_64",  "documentationLabel": "Using the 64 bit compiler from Microsoft",  "codeSnippet": "CMAKE_CL_64" },
{  "type": "variable",  "label": "CMAKE_COLOR_MAKEFILE",  "documentationLabel": "Enables color output when using the Makefile generator.",  "codeSnippet": "CMAKE_COLOR_MAKEFILE" },
{  "type": "variable",  "label": "CMAKE_COMMAND",  "documentationLabel": "The full path to the cmake executable.",  "codeSnippet": "CMAKE_COMMAND" },
{  "type": "variable",  "label": "CMAKE_COMPILER_2005",  "documentationLabel": "Using the Visual Studio 2005 compiler from Microsoft",  "codeSnippet": "CMAKE_COMPILER_2005" },
{  "type": "variable",  "label": "CMAKE_COMPILER_IS_GNU<LANG>",  "documentationLabel": "True if the compiler is GNU.",  "codeSnippet": "CMAKE_COMPILER_IS_GNU<LANG>" },
{  "type": "variable",  "label": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory for MS debug symbol ``.pdb`` files",  "codeSnippet": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for MS debug symbol ``.pdb`` files",  "codeSnippet": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_CONFIGURATION_TYPES",  "documentationLabel": "Specifies the available build types on multi-config generators.",  "codeSnippet": "CMAKE_CONFIGURATION_TYPES" },
{  "type": "variable",  "label": "CMAKE_CROSSCOMPILING",  "documentationLabel": "Is CMake currently cross compiling.",  "codeSnippet": "CMAKE_CROSSCOMPILING" },
{  "type": "variable",  "label": "CMAKE_CTEST_COMMAND",  "documentationLabel": "Full path to ctest command installed with cmake.",  "codeSnippet": "CMAKE_CTEST_COMMAND" },
{  "type": "variable",  "label": "CMAKE_CURRENT_BINARY_DIR",  "documentationLabel": "The path to the binary directory currently being processed.",  "codeSnippet": "CMAKE_CURRENT_BINARY_DIR" },
{  "type": "variable",  "label": "CMAKE_CURRENT_LIST_DIR",  "documentationLabel": "Full directory of the listfile currently being processed.",  "codeSnippet": "CMAKE_CURRENT_LIST_DIR" },
{  "type": "variable",  "label": "CMAKE_CURRENT_LIST_FILE",  "documentationLabel": "Full path to the listfile currently being processed.",  "codeSnippet": "CMAKE_CURRENT_LIST_FILE" },
{  "type": "variable",  "label": "CMAKE_CURRENT_LIST_LINE",  "documentationLabel": "The line number of the current file being processed.",  "codeSnippet": "CMAKE_CURRENT_LIST_LINE" },
{  "type": "variable",  "label": "CMAKE_CURRENT_SOURCE_DIR",  "documentationLabel": "The path to the source directory currently being processed.",  "codeSnippet": "CMAKE_CURRENT_SOURCE_DIR" },
{  "type": "variable",  "label": "CMAKE_CXX_COMPILE_FEATURES",  "documentationLabel": "List of features known to the C++ compiler",  "codeSnippet": "CMAKE_CXX_COMPILE_FEATURES" },
{  "type": "variable",  "label": "CMAKE_CXX_EXTENSIONS",  "documentationLabel": "Default value for ``CXX_EXTENSIONS`` property of targets.",  "codeSnippet": "CMAKE_CXX_EXTENSIONS" },
{  "type": "variable",  "label": "CMAKE_CXX_STANDARD",  "documentationLabel": "Default value for ``CXX_STANDARD`` property of targets.",  "codeSnippet": "CMAKE_CXX_STANDARD" },
{  "type": "variable",  "label": "CMAKE_CXX_STANDARD_REQUIRED",  "documentationLabel": "Default value for ``CXX_STANDARD_REQUIRED`` property of targets.",  "codeSnippet": "CMAKE_CXX_STANDARD_REQUIRED" },
{  "type": "variable",  "label": "CMAKE_C_COMPILE_FEATURES",  "documentationLabel": "List of features known to the C compiler",  "codeSnippet": "CMAKE_C_COMPILE_FEATURES" },
{  "type": "variable",  "label": "CMAKE_C_EXTENSIONS",  "documentationLabel": "Default value for ``C_EXTENSIONS`` property of targets.",  "codeSnippet": "CMAKE_C_EXTENSIONS" },
{  "type": "variable",  "label": "CMAKE_C_STANDARD",  "documentationLabel": "Default value for ``C_STANDARD`` property of targets.",  "codeSnippet": "CMAKE_C_STANDARD" },
{  "type": "variable",  "label": "CMAKE_C_STANDARD_REQUIRED",  "documentationLabel": "Default value for ``C_STANDARD_REQUIRED`` property of targets.",  "codeSnippet": "CMAKE_C_STANDARD_REQUIRED" },
{  "type": "variable",  "label": "CMAKE_DEBUG_POSTFIX",  "documentationLabel": "See variable CMAKE_<CONFIG>_POSTFIX.",  "codeSnippet": "CMAKE_DEBUG_POSTFIX" },
{  "type": "variable",  "label": "CMAKE_DEBUG_TARGET_PROPERTIES",  "documentationLabel": "Enables tracing output for target properties.",  "codeSnippet": "CMAKE_DEBUG_TARGET_PROPERTIES" },
{  "type": "variable",  "label": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>",  "documentationLabel": "Variable for disabling find_package() calls.",  "codeSnippet": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>" },
{  "type": "variable",  "label": "CMAKE_DL_LIBS",  "documentationLabel": "Name of library containing dlopen and dlcose.",  "codeSnippet": "CMAKE_DL_LIBS" },
{  "type": "variable",  "label": "CMAKE_EDIT_COMMAND",  "documentationLabel": "Full path to cmake-gui or ccmake.  Defined only for Makefile generators",  "codeSnippet": "CMAKE_EDIT_COMMAND" },
{  "type": "variable",  "label": "CMAKE_ERROR_DEPRECATED",  "documentationLabel": "Whether to issue deprecation errors for macros and functions.",  "codeSnippet": "CMAKE_ERROR_DEPRECATED" },
{  "type": "variable",  "label": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",  "documentationLabel": "Ask cmake_install.cmake script to error out as soon as a file with absolute INSTALL DESTINATION is encountered.",  "codeSnippet": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION" },
{  "type": "variable",  "label": "CMAKE_EXECUTABLE_SUFFIX",  "documentationLabel": "The suffix for executables on this platform.",  "codeSnippet": "CMAKE_EXECUTABLE_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_EXE_LINKER_FLAGS",  "documentationLabel": "Linker flags to be used to create executables.",  "codeSnippet": "CMAKE_EXE_LINKER_FLAGS" },
{  "type": "variable",  "label": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>",  "documentationLabel": "Flags to be used when linking an executable.",  "codeSnippet": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY",  "documentationLabel": "Disable the ``export(PACKAGE)`` command.",  "codeSnippet": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY" },
{  "type": "variable",  "label": "CMAKE_EXTRA_GENERATOR",  "documentationLabel": "The extra generator used to build the project.",  "codeSnippet": "CMAKE_EXTRA_GENERATOR" },
{  "type": "variable",  "label": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES",  "documentationLabel": "Additional suffixes for shared libraries.",  "codeSnippet": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES" },
{  "type": "variable",  "label": "CMAKE_FIND_LIBRARY_PREFIXES",  "documentationLabel": "Prefixes to prepend when looking for libraries.",  "codeSnippet": "CMAKE_FIND_LIBRARY_PREFIXES" },
{  "type": "variable",  "label": "CMAKE_FIND_LIBRARY_SUFFIXES",  "documentationLabel": "Suffixes to append when looking for libraries.",  "codeSnippet": "CMAKE_FIND_LIBRARY_SUFFIXES" },
{  "type": "variable",  "label": "CMAKE_FIND_NO_INSTALL_PREFIX",  "documentationLabel": "Ignore the ``CMAKE_INSTALL_PREFIX`` when searching for assets.",  "codeSnippet": "CMAKE_FIND_NO_INSTALL_PREFIX" },
{  "type": "variable",  "label": "CMAKE_FIND_PACKAGE_NAME",  "documentationLabel": "Defined by the ``find_package()`` command while loading",  "codeSnippet": "CMAKE_FIND_PACKAGE_NAME" },
{  "type": "variable",  "label": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY",  "documentationLabel": "Skip :ref:`User Package Registry` in ``find_package()`` calls.",  "codeSnippet": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY" },
{  "type": "variable",  "label": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY",  "documentationLabel": "Skip :ref:`System Package Registry` in ``find_package()`` calls.",  "codeSnippet": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY" },
{  "type": "variable",  "label": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE",  "documentationLabel": "Tell find_package to warn if called without an explicit mode.",  "codeSnippet": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE" },
{  "type": "variable",  "label": "CMAKE_FIND_ROOT_PATH",  "documentationLabel": "List of root paths to search on the filesystem.",  "codeSnippet": "CMAKE_FIND_ROOT_PATH" },
{  "type": "variable",  "label": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",  "documentationLabel": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and",  "codeSnippet": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE" },
{  "type": "variable",  "label": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",  "documentationLabel": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and",  "codeSnippet": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY" },
{  "type": "variable",  "label": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",  "documentationLabel": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and",  "codeSnippet": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE" },
{  "type": "variable",  "label": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM",  "documentationLabel": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and",  "codeSnippet": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM" },
{  "type": "variable",  "label": "CMAKE_FRAMEWORK_PATH",  "documentationLabel": "Search path for OS X frameworks used by the ``find_library()``,",  "codeSnippet": "CMAKE_FRAMEWORK_PATH" },
{  "type": "variable",  "label": "CMAKE_Fortran_FORMAT",  "documentationLabel": "Set to FIXED or FREE to indicate the Fortran source layout.",  "codeSnippet": "CMAKE_Fortran_FORMAT" },
{  "type": "variable",  "label": "CMAKE_Fortran_MODDIR_DEFAULT",  "documentationLabel": "Fortran default module output directory.",  "codeSnippet": "CMAKE_Fortran_MODDIR_DEFAULT" },
{  "type": "variable",  "label": "CMAKE_Fortran_MODDIR_FLAG",  "documentationLabel": "Fortran flag for module output directory.",  "codeSnippet": "CMAKE_Fortran_MODDIR_FLAG" },
{  "type": "variable",  "label": "CMAKE_Fortran_MODOUT_FLAG",  "documentationLabel": "Fortran flag to enable module output.",  "codeSnippet": "CMAKE_Fortran_MODOUT_FLAG" },
{  "type": "variable",  "label": "CMAKE_Fortran_MODULE_DIRECTORY",  "documentationLabel": "Fortran module output directory.",  "codeSnippet": "CMAKE_Fortran_MODULE_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_GENERATOR",  "documentationLabel": "The generator used to build the project.",  "codeSnippet": "CMAKE_GENERATOR" },
{  "type": "variable",  "label": "CMAKE_GENERATOR_PLATFORM",  "documentationLabel": "Generator-specific target platform name specified by user.",  "codeSnippet": "CMAKE_GENERATOR_PLATFORM" },
{  "type": "variable",  "label": "CMAKE_GENERATOR_TOOLSET",  "documentationLabel": "Native build system toolset name specified by user.",  "codeSnippet": "CMAKE_GENERATOR_TOOLSET" },
{  "type": "variable",  "label": "CMAKE_GNUtoMS",  "documentationLabel": "Convert GNU import libraries (.dll.a) to MS format (.lib).",  "codeSnippet": "CMAKE_GNUtoMS" },
{  "type": "variable",  "label": "CMAKE_HOME_DIRECTORY",  "documentationLabel": "Path to top of source tree.",  "codeSnippet": "CMAKE_HOME_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_HOST_APPLE",  "documentationLabel": "True for Apple OS X operating systems.",  "codeSnippet": "CMAKE_HOST_APPLE" },
{  "type": "variable",  "label": "CMAKE_HOST_SYSTEM",  "documentationLabel": "Composit Name of OS CMake is being run on.",  "codeSnippet": "CMAKE_HOST_SYSTEM" },
{  "type": "variable",  "label": "CMAKE_HOST_SYSTEM_NAME",  "documentationLabel": "Name of the OS CMake is running on.",  "codeSnippet": "CMAKE_HOST_SYSTEM_NAME" },
{  "type": "variable",  "label": "CMAKE_HOST_SYSTEM_PROCESSOR",  "documentationLabel": "The name of the CPU CMake is running on.",  "codeSnippet": "CMAKE_HOST_SYSTEM_PROCESSOR" },
{  "type": "variable",  "label": "CMAKE_HOST_SYSTEM_VERSION",  "documentationLabel": "The OS version CMake is running on.",  "codeSnippet": "CMAKE_HOST_SYSTEM_VERSION" },
{  "type": "variable",  "label": "CMAKE_HOST_UNIX",  "documentationLabel": "True for UNIX and UNIX like operating systems.",  "codeSnippet": "CMAKE_HOST_UNIX" },
{  "type": "variable",  "label": "CMAKE_HOST_WIN32",  "documentationLabel": "True on windows systems, including win64.",  "codeSnippet": "CMAKE_HOST_WIN32" },
{  "type": "variable",  "label": "CMAKE_IGNORE_PATH",  "documentationLabel": "Path to be ignored by FIND_XXX() commands.",  "codeSnippet": "CMAKE_IGNORE_PATH" },
{  "type": "variable",  "label": "CMAKE_IMPORT_LIBRARY_PREFIX",  "documentationLabel": "The prefix for import libraries that you link to.",  "codeSnippet": "CMAKE_IMPORT_LIBRARY_PREFIX" },
{  "type": "variable",  "label": "CMAKE_IMPORT_LIBRARY_SUFFIX",  "documentationLabel": "The suffix for import libraries that you link to.",  "codeSnippet": "CMAKE_IMPORT_LIBRARY_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_INCLUDE_CURRENT_DIR",  "documentationLabel": "Automatically add the current source- and build directories to the include path.",  "codeSnippet": "CMAKE_INCLUDE_CURRENT_DIR" },
{  "type": "variable",  "label": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE",  "documentationLabel": "Automatically add the current source- and build directories to the INTERFACE_INCLUDE_DIRECTORIES.",  "codeSnippet": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE" },
{  "type": "variable",  "label": "CMAKE_INCLUDE_DIRECTORIES_BEFORE",  "documentationLabel": "Whether to append or prepend directories by default in ``include_directories()``.",  "codeSnippet": "CMAKE_INCLUDE_DIRECTORIES_BEFORE" },
{  "type": "variable",  "label": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE",  "documentationLabel": "Whether to force prepending of project include directories.",  "codeSnippet": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE" },
{  "type": "variable",  "label": "CMAKE_INCLUDE_PATH",  "documentationLabel": "Path used for searching by FIND_FILE() and FIND_PATH().",  "codeSnippet": "CMAKE_INCLUDE_PATH" },
{  "type": "variable",  "label": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME",  "documentationLabel": "Default component used in install() commands.",  "codeSnippet": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME" },
{  "type": "variable",  "label": "CMAKE_INSTALL_MESSAGE",  "documentationLabel": "Specify verbosity of installation script code generated by the",  "codeSnippet": "CMAKE_INSTALL_MESSAGE" },
{  "type": "variable",  "label": "CMAKE_INSTALL_NAME_DIR",  "documentationLabel": "Mac OS X directory name for installed targets.",  "codeSnippet": "CMAKE_INSTALL_NAME_DIR" },
{  "type": "variable",  "label": "CMAKE_INSTALL_PREFIX",  "documentationLabel": "Install directory used by install.",  "codeSnippet": "CMAKE_INSTALL_PREFIX" },
{  "type": "variable",  "label": "CMAKE_INSTALL_RPATH",  "documentationLabel": "The rpath to use for installed targets.",  "codeSnippet": "CMAKE_INSTALL_RPATH" },
{  "type": "variable",  "label": "CMAKE_INSTALL_RPATH_USE_LINK_PATH",  "documentationLabel": "Add paths to linker search and installed rpath.",  "codeSnippet": "CMAKE_INSTALL_RPATH_USE_LINK_PATH" },
{  "type": "variable",  "label": "CMAKE_INTERNAL_PLATFORM_ABI",  "documentationLabel": "An internal variable subject to change.",  "codeSnippet": "CMAKE_INTERNAL_PLATFORM_ABI" },
{  "type": "variable",  "label": "CMAKE_JOB_POOL_COMPILE",  "documentationLabel": "This variable is used to initialize the ``JOB_POOL_COMPILE``",  "codeSnippet": "CMAKE_JOB_POOL_COMPILE" },
{  "type": "variable",  "label": "CMAKE_JOB_POOL_LINK",  "documentationLabel": "This variable is used to initialize the ``JOB_POOL_LINK``",  "codeSnippet": "CMAKE_JOB_POOL_LINK" },
{  "type": "variable",  "label": "CMAKE_LIBRARY_ARCHITECTURE",  "documentationLabel": "Target architecture library directory name, if detected.",  "codeSnippet": "CMAKE_LIBRARY_ARCHITECTURE" },
{  "type": "variable",  "label": "CMAKE_LIBRARY_ARCHITECTURE_REGEX",  "documentationLabel": "Regex matching possible target architecture library directory names.",  "codeSnippet": "CMAKE_LIBRARY_ARCHITECTURE_REGEX" },
{  "type": "variable",  "label": "CMAKE_LIBRARY_OUTPUT_DIRECTORY",  "documentationLabel": "Where to put all the LIBRARY targets when built.",  "codeSnippet": "CMAKE_LIBRARY_OUTPUT_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_LIBRARY_PATH",  "documentationLabel": "Path used for searching by FIND_LIBRARY().",  "codeSnippet": "CMAKE_LIBRARY_PATH" },
{  "type": "variable",  "label": "CMAKE_LIBRARY_PATH_FLAG",  "documentationLabel": "The flag to be used to add a library search path to a compiler.",  "codeSnippet": "CMAKE_LIBRARY_PATH_FLAG" },
{  "type": "variable",  "label": "CMAKE_LINK_DEF_FILE_FLAG",  "documentationLabel": "Linker flag to be used to specify a .def file for dll creation.",  "codeSnippet": "CMAKE_LINK_DEF_FILE_FLAG" },
{  "type": "variable",  "label": "CMAKE_LINK_DEPENDS_NO_SHARED",  "documentationLabel": "Whether to skip link dependencies on shared library files.",  "codeSnippet": "CMAKE_LINK_DEPENDS_NO_SHARED" },
{  "type": "variable",  "label": "CMAKE_LINK_INTERFACE_LIBRARIES",  "documentationLabel": "Default value for LINK_INTERFACE_LIBRARIES of targets.",  "codeSnippet": "CMAKE_LINK_INTERFACE_LIBRARIES" },
{  "type": "variable",  "label": "CMAKE_LINK_LIBRARY_FILE_FLAG",  "documentationLabel": "Flag to be used to link a library specified by a path to its file.",  "codeSnippet": "CMAKE_LINK_LIBRARY_FILE_FLAG" },
{  "type": "variable",  "label": "CMAKE_LINK_LIBRARY_FLAG",  "documentationLabel": "Flag to be used to link a library into an executable.",  "codeSnippet": "CMAKE_LINK_LIBRARY_FLAG" },
{  "type": "variable",  "label": "CMAKE_LINK_LIBRARY_SUFFIX",  "documentationLabel": "The suffix for libraries that you link to.",  "codeSnippet": "CMAKE_LINK_LIBRARY_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_MACOSX_BUNDLE",  "documentationLabel": "Default value for MACOSX_BUNDLE of targets.",  "codeSnippet": "CMAKE_MACOSX_BUNDLE" },
{  "type": "variable",  "label": "CMAKE_MACOSX_RPATH",  "documentationLabel": "Whether to use rpaths on Mac OS X.",  "codeSnippet": "CMAKE_MACOSX_RPATH" },
{  "type": "variable",  "label": "CMAKE_MAJOR_VERSION",  "documentationLabel": "First version number component of the ``CMAKE_VERSION``",  "codeSnippet": "CMAKE_MAJOR_VERSION" },
{  "type": "variable",  "label": "CMAKE_MAKE_PROGRAM",  "documentationLabel": "Tool that can launch the native build system.",  "codeSnippet": "CMAKE_MAKE_PROGRAM" },
{  "type": "variable",  "label": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>",  "documentationLabel": "Default value for MAP_IMPORTED_CONFIG_<CONFIG> of targets.",  "codeSnippet": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_MATCH_COUNT",  "documentationLabel": "The number of matches with the last regular expression.",  "codeSnippet": "CMAKE_MATCH_COUNT" },
{  "type": "variable",  "label": "CMAKE_MFC_FLAG",  "documentationLabel": "Tell cmake to use MFC for an executable or dll.",  "codeSnippet": "CMAKE_MFC_FLAG" },
{  "type": "variable",  "label": "CMAKE_MINIMUM_REQUIRED_VERSION",  "documentationLabel": "Version specified to cmake_minimum_required command",  "codeSnippet": "CMAKE_MINIMUM_REQUIRED_VERSION" },
{  "type": "variable",  "label": "CMAKE_MINOR_VERSION",  "documentationLabel": "Second version number component of the ``CMAKE_VERSION``",  "codeSnippet": "CMAKE_MINOR_VERSION" },
{  "type": "variable",  "label": "CMAKE_MODULE_LINKER_FLAGS",  "documentationLabel": "Linker flags to be used to create modules.",  "codeSnippet": "CMAKE_MODULE_LINKER_FLAGS" },
{  "type": "variable",  "label": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>",  "documentationLabel": "Flags to be used when linking a module.",  "codeSnippet": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_MODULE_PATH",  "documentationLabel": "List of directories to search for CMake modules.",  "codeSnippet": "CMAKE_MODULE_PATH" },
{  "type": "variable",  "label": "CMAKE_NOT_USING_CONFIG_FLAGS",  "documentationLabel": "Skip _BUILD_TYPE flags if true.",  "codeSnippet": "CMAKE_NOT_USING_CONFIG_FLAGS" },
{  "type": "variable",  "label": "CMAKE_NO_BUILTIN_CHRPATH",  "documentationLabel": "Do not use the builtin ELF editor to fix RPATHs on installation.",  "codeSnippet": "CMAKE_NO_BUILTIN_CHRPATH" },
{  "type": "variable",  "label": "CMAKE_NO_SYSTEM_FROM_IMPORTED",  "documentationLabel": "Default value for NO_SYSTEM_FROM_IMPORTED of targets.",  "codeSnippet": "CMAKE_NO_SYSTEM_FROM_IMPORTED" },
{  "type": "variable",  "label": "CMAKE_OBJECT_PATH_MAX",  "documentationLabel": "Maximum object file full-path length allowed by native build tools.",  "codeSnippet": "CMAKE_OBJECT_PATH_MAX" },
{  "type": "variable",  "label": "CMAKE_OSX_ARCHITECTURES",  "documentationLabel": "Target specific architectures for OS X.",  "codeSnippet": "CMAKE_OSX_ARCHITECTURES" },
{  "type": "variable",  "label": "CMAKE_OSX_DEPLOYMENT_TARGET",  "documentationLabel": "Specify the minimum version of OS X on which the target binaries are",  "codeSnippet": "CMAKE_OSX_DEPLOYMENT_TARGET" },
{  "type": "variable",  "label": "CMAKE_OSX_SYSROOT",  "documentationLabel": "Specify the location or name of the OS X platform SDK to be used.",  "codeSnippet": "CMAKE_OSX_SYSROOT" },
{  "type": "variable",  "label": "CMAKE_PARENT_LIST_FILE",  "documentationLabel": "Full path to the CMake file that included the current one.",  "codeSnippet": "CMAKE_PARENT_LIST_FILE" },
{  "type": "variable",  "label": "CMAKE_PATCH_VERSION",  "documentationLabel": "Third version number component of the ``CMAKE_VERSION``",  "codeSnippet": "CMAKE_PATCH_VERSION" },
{  "type": "variable",  "label": "CMAKE_PDB_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory for MS debug symbol ``.pdb`` files generated by the",  "codeSnippet": "CMAKE_PDB_OUTPUT_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for MS debug symbol ``.pdb`` files",  "codeSnippet": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_POLICY_DEFAULT_CMP<NNNN>",  "documentationLabel": "Default for CMake Policy CMP<NNNN> when it is otherwise left unset.",  "codeSnippet": "CMAKE_POLICY_DEFAULT_CMP<NNNN>" },
{  "type": "variable",  "label": "CMAKE_POLICY_WARNING_CMP<NNNN>",  "documentationLabel": "Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``",  "codeSnippet": "CMAKE_POLICY_WARNING_CMP<NNNN>" },
{  "type": "variable",  "label": "CMAKE_POSITION_INDEPENDENT_CODE",  "documentationLabel": "Default value for POSITION_INDEPENDENT_CODE of targets.",  "codeSnippet": "CMAKE_POSITION_INDEPENDENT_CODE" },
{  "type": "variable",  "label": "CMAKE_PREFIX_PATH",  "documentationLabel": "Path used for searching by FIND_XXX(), with appropriate suffixes added.",  "codeSnippet": "CMAKE_PREFIX_PATH" },
{  "type": "variable",  "label": "CMAKE_PROGRAM_PATH",  "documentationLabel": "Path used for searching by FIND_PROGRAM().",  "codeSnippet": "CMAKE_PROGRAM_PATH" },
{  "type": "variable",  "label": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE",  "documentationLabel": "A CMake language file or module to be included by the ``project()``",  "codeSnippet": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE" },
{  "type": "variable",  "label": "CMAKE_PROJECT_NAME",  "documentationLabel": "The name of the current project.",  "codeSnippet": "CMAKE_PROJECT_NAME" },
{  "type": "variable",  "label": "CMAKE_RANLIB",  "documentationLabel": "Name of randomizing tool for static libraries.",  "codeSnippet": "CMAKE_RANLIB" },
{  "type": "variable",  "label": "CMAKE_ROOT",  "documentationLabel": "Install directory for running cmake.",  "codeSnippet": "CMAKE_ROOT" },
{  "type": "variable",  "label": "CMAKE_RUNTIME_OUTPUT_DIRECTORY",  "documentationLabel": "Where to put all the RUNTIME targets when built.",  "codeSnippet": "CMAKE_RUNTIME_OUTPUT_DIRECTORY" },
{  "type": "variable",  "label": "CMAKE_SCRIPT_MODE_FILE",  "documentationLabel": "Full path to the -P script file currently being processed.",  "codeSnippet": "CMAKE_SCRIPT_MODE_FILE" },
{  "type": "variable",  "label": "CMAKE_SHARED_LIBRARY_PREFIX",  "documentationLabel": "The prefix for shared libraries that you link to.",  "codeSnippet": "CMAKE_SHARED_LIBRARY_PREFIX" },
{  "type": "variable",  "label": "CMAKE_SHARED_LIBRARY_SUFFIX",  "documentationLabel": "The suffix for shared libraries that you link to.",  "codeSnippet": "CMAKE_SHARED_LIBRARY_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_SHARED_LINKER_FLAGS",  "documentationLabel": "Linker flags to be used to create shared libraries.",  "codeSnippet": "CMAKE_SHARED_LINKER_FLAGS" },
{  "type": "variable",  "label": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>",  "documentationLabel": "Flags to be used when linking a shared library.",  "codeSnippet": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_SHARED_MODULE_PREFIX",  "documentationLabel": "The prefix for loadable modules that you link to.",  "codeSnippet": "CMAKE_SHARED_MODULE_PREFIX" },
{  "type": "variable",  "label": "CMAKE_SHARED_MODULE_SUFFIX",  "documentationLabel": "The suffix for shared libraries that you link to.",  "codeSnippet": "CMAKE_SHARED_MODULE_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_SIZEOF_VOID_P",  "documentationLabel": "Size of a void pointer.",  "codeSnippet": "CMAKE_SIZEOF_VOID_P" },
{  "type": "variable",  "label": "CMAKE_SKIP_BUILD_RPATH",  "documentationLabel": "Do not include RPATHs in the build tree.",  "codeSnippet": "CMAKE_SKIP_BUILD_RPATH" },
{  "type": "variable",  "label": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY",  "documentationLabel": "Don't make the install target depend on the all target.",  "codeSnippet": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY" },
{  "type": "variable",  "label": "CMAKE_SKIP_INSTALL_RPATH",  "documentationLabel": "Do not include RPATHs in the install tree.",  "codeSnippet": "CMAKE_SKIP_INSTALL_RPATH" },
{  "type": "variable",  "label": "CMAKE_SKIP_INSTALL_RULES",  "documentationLabel": "Whether to disable generation of installation rules.",  "codeSnippet": "CMAKE_SKIP_INSTALL_RULES" },
{  "type": "variable",  "label": "CMAKE_SKIP_RPATH",  "documentationLabel": "If true, do not add run time path information.",  "codeSnippet": "CMAKE_SKIP_RPATH" },
{  "type": "variable",  "label": "CMAKE_SOURCE_DIR",  "documentationLabel": "The path to the top level of the source tree.",  "codeSnippet": "CMAKE_SOURCE_DIR" },
{  "type": "variable",  "label": "CMAKE_STAGING_PREFIX",  "documentationLabel": "This variable may be set to a path to install to when cross-compiling. This can",  "codeSnippet": "CMAKE_STAGING_PREFIX" },
{  "type": "variable",  "label": "CMAKE_STANDARD_LIBRARIES",  "documentationLabel": "Libraries linked into every executable and shared library.",  "codeSnippet": "CMAKE_STANDARD_LIBRARIES" },
{  "type": "variable",  "label": "CMAKE_STATIC_LIBRARY_PREFIX",  "documentationLabel": "The prefix for static libraries that you link to.",  "codeSnippet": "CMAKE_STATIC_LIBRARY_PREFIX" },
{  "type": "variable",  "label": "CMAKE_STATIC_LIBRARY_SUFFIX",  "documentationLabel": "The suffix for static libraries that you link to.",  "codeSnippet": "CMAKE_STATIC_LIBRARY_SUFFIX" },
{  "type": "variable",  "label": "CMAKE_STATIC_LINKER_FLAGS",  "documentationLabel": "Linker flags to be used to create static libraries.",  "codeSnippet": "CMAKE_STATIC_LINKER_FLAGS" },
{  "type": "variable",  "label": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>",  "documentationLabel": "Flags to be used when linking a static library.",  "codeSnippet": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>" },
{  "type": "variable",  "label": "CMAKE_SYSROOT",  "documentationLabel": "Path to pass to the compiler in the ``--sysroot`` flag.",  "codeSnippet": "CMAKE_SYSROOT" },
{  "type": "variable",  "label": "CMAKE_SYSTEM",  "documentationLabel": "Composit Name of OS CMake is compiling for.",  "codeSnippet": "CMAKE_SYSTEM" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_IGNORE_PATH",  "documentationLabel": "Path to be ignored by FIND_XXX() commands.",  "codeSnippet": "CMAKE_SYSTEM_IGNORE_PATH" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_INCLUDE_PATH",  "documentationLabel": "Path used for searching by FIND_FILE() and FIND_PATH().",  "codeSnippet": "CMAKE_SYSTEM_INCLUDE_PATH" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_LIBRARY_PATH",  "documentationLabel": "Path used for searching by FIND_LIBRARY().",  "codeSnippet": "CMAKE_SYSTEM_LIBRARY_PATH" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_NAME",  "documentationLabel": "Name of the OS CMake is building for.",  "codeSnippet": "CMAKE_SYSTEM_NAME" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_PREFIX_PATH",  "documentationLabel": "Path used for searching by FIND_XXX(), with appropriate suffixes added.",  "codeSnippet": "CMAKE_SYSTEM_PREFIX_PATH" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_PROCESSOR",  "documentationLabel": "The name of the CPU CMake is building for.",  "codeSnippet": "CMAKE_SYSTEM_PROCESSOR" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_PROGRAM_PATH",  "documentationLabel": "Path used for searching by FIND_PROGRAM().",  "codeSnippet": "CMAKE_SYSTEM_PROGRAM_PATH" },
{  "type": "variable",  "label": "CMAKE_SYSTEM_VERSION",  "documentationLabel": "The OS version CMake is building for.",  "codeSnippet": "CMAKE_SYSTEM_VERSION" },
{  "type": "variable",  "label": "CMAKE_TOOLCHAIN_FILE",  "documentationLabel": "Path to toolchain file supplied to ``cmake(1)``.",  "codeSnippet": "CMAKE_TOOLCHAIN_FILE" },
{  "type": "variable",  "label": "CMAKE_TRY_COMPILE_CONFIGURATION",  "documentationLabel": "Build configuration used for try_compile and try_run projects.",  "codeSnippet": "CMAKE_TRY_COMPILE_CONFIGURATION" },
{  "type": "variable",  "label": "CMAKE_TWEAK_VERSION",  "documentationLabel": "Defined to ``0`` for compatibility with code written for older",  "codeSnippet": "CMAKE_TWEAK_VERSION" },
{  "type": "variable",  "label": "CMAKE_USER_MAKE_RULES_OVERRIDE",  "documentationLabel": "Specify a CMake file that overrides platform information.",  "codeSnippet": "CMAKE_USER_MAKE_RULES_OVERRIDE" },
{  "type": "variable",  "label": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>",  "documentationLabel": "Specify a CMake file that overrides platform information for <LANG>.",  "codeSnippet": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>" },
{  "type": "variable",  "label": "CMAKE_USE_RELATIVE_PATHS",  "documentationLabel": "Use relative paths (May not work!).",  "codeSnippet": "CMAKE_USE_RELATIVE_PATHS" },
{  "type": "variable",  "label": "CMAKE_VERBOSE_MAKEFILE",  "documentationLabel": "Enable verbose output from Makefile builds.",  "codeSnippet": "CMAKE_VERBOSE_MAKEFILE" },
{  "type": "variable",  "label": "CMAKE_VERSION",  "documentationLabel": "The CMake version string as three non-negative integer components",  "codeSnippet": "CMAKE_VERSION" },
{  "type": "variable",  "label": "CMAKE_VISIBILITY_INLINES_HIDDEN",  "documentationLabel": "Default value for VISIBILITY_INLINES_HIDDEN of targets.",  "codeSnippet": "CMAKE_VISIBILITY_INLINES_HIDDEN" },
{  "type": "variable",  "label": "CMAKE_VS_DEVENV_COMMAND",  "documentationLabel": "The generators for ``Visual Studio 7`` and above set this",  "codeSnippet": "CMAKE_VS_DEVENV_COMMAND" },
{  "type": "variable",  "label": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION",  "documentationLabel": "When generating for Visual Studio 7 or greater with the Intel Fortran",  "codeSnippet": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION" },
{  "type": "variable",  "label": "CMAKE_VS_MSBUILD_COMMAND",  "documentationLabel": "The generators for ``Visual Studio 10 2010`` and above set this",  "codeSnippet": "CMAKE_VS_MSBUILD_COMMAND" },
{  "type": "variable",  "label": "CMAKE_VS_MSDEV_COMMAND",  "documentationLabel": "The ``Visual Studio 6`` generator sets this variable to the",  "codeSnippet": "CMAKE_VS_MSDEV_COMMAND" },
{  "type": "variable",  "label": "CMAKE_VS_NsightTegra_VERSION",  "documentationLabel": "When using a Visual Studio generator with the",  "codeSnippet": "CMAKE_VS_NsightTegra_VERSION" },
{  "type": "variable",  "label": "CMAKE_VS_PLATFORM_NAME",  "documentationLabel": "Visual Studio target platform name.",  "codeSnippet": "CMAKE_VS_PLATFORM_NAME" },
{  "type": "variable",  "label": "CMAKE_VS_PLATFORM_TOOLSET",  "documentationLabel": "Visual Studio Platform Toolset name.",  "codeSnippet": "CMAKE_VS_PLATFORM_TOOLSET" },
{  "type": "variable",  "label": "CMAKE_WARN_DEPRECATED",  "documentationLabel": "Whether to issue deprecation warnings for macros and functions.",  "codeSnippet": "CMAKE_WARN_DEPRECATED" },
{  "type": "variable",  "label": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",  "documentationLabel": "Ask cmake_install.cmake script to warn each time a file with absolute INSTALL DESTINATION is encountered.",  "codeSnippet": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION" },
{  "type": "variable",  "label": "CMAKE_WIN32_EXECUTABLE",  "documentationLabel": "Default value for WIN32_EXECUTABLE of targets.",  "codeSnippet": "CMAKE_WIN32_EXECUTABLE" },
{  "type": "variable",  "label": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>",  "documentationLabel": "Set Xcode target attributes directly.",  "codeSnippet": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>" },
{  "type": "variable",  "label": "CMAKE_XCODE_PLATFORM_TOOLSET",  "documentationLabel": "Xcode compiler selection.",  "codeSnippet": "CMAKE_XCODE_PLATFORM_TOOLSET" },
{  "type": "variable",  "label": "CPACK_ABSOLUTE_DESTINATION_FILES",  "documentationLabel": "List of files which have been installed using  an ABSOLUTE DESTINATION path.",  "codeSnippet": "CPACK_ABSOLUTE_DESTINATION_FILES" },
{  "type": "variable",  "label": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY",  "documentationLabel": "Boolean toggle to include/exclude top level directory (component case).",  "codeSnippet": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY" },
{  "type": "variable",  "label": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",  "documentationLabel": "Ask CPack to error out as soon as a file with absolute INSTALL DESTINATION is encountered.",  "codeSnippet": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION" },
{  "type": "variable",  "label": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY",  "documentationLabel": "Boolean toggle to include/exclude top level directory.",  "codeSnippet": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY" },
{  "type": "variable",  "label": "CPACK_INSTALL_SCRIPT",  "documentationLabel": "Extra CMake script provided by the user.",  "codeSnippet": "CPACK_INSTALL_SCRIPT" },
{  "type": "variable",  "label": "CPACK_PACKAGING_INSTALL_PREFIX",  "documentationLabel": "The prefix used in the built package.",  "codeSnippet": "CPACK_PACKAGING_INSTALL_PREFIX" },
{  "type": "variable",  "label": "CPACK_SET_DESTDIR",  "documentationLabel": "Boolean toggle to make CPack use DESTDIR mechanism when packaging.",  "codeSnippet": "CPACK_SET_DESTDIR" },
{  "type": "variable",  "label": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",  "documentationLabel": "Ask CPack to warn each time a file with absolute INSTALL DESTINATION is encountered.",  "codeSnippet": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION" },
{  "type": "variable",  "label": "CTEST_BINARY_DIRECTORY",  "documentationLabel": "Specify the CTest ``BuildDirectory`` setting",  "codeSnippet": "CTEST_BINARY_DIRECTORY" },
{  "type": "variable",  "label": "CTEST_BUILD_COMMAND",  "documentationLabel": "Specify the CTest ``MakeCommand`` setting",  "codeSnippet": "CTEST_BUILD_COMMAND" },
{  "type": "variable",  "label": "CTEST_BUILD_NAME",  "documentationLabel": "Specify the CTest ``BuildName`` setting",  "codeSnippet": "CTEST_BUILD_NAME" },
{  "type": "variable",  "label": "CTEST_BZR_COMMAND",  "documentationLabel": "Specify the CTest ``BZRCommand`` setting",  "codeSnippet": "CTEST_BZR_COMMAND" },
{  "type": "variable",  "label": "CTEST_BZR_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``BZRUpdateOptions`` setting",  "codeSnippet": "CTEST_BZR_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_CHECKOUT_COMMAND",  "documentationLabel": "Tell the ``ctest_start()`` command how to checkout or initialize",  "codeSnippet": "CTEST_CHECKOUT_COMMAND" },
{  "type": "variable",  "label": "CTEST_CONFIGURATION_TYPE",  "documentationLabel": "Specify the CTest ``DefaultCTestConfigurationType`` setting",  "codeSnippet": "CTEST_CONFIGURATION_TYPE" },
{  "type": "variable",  "label": "CTEST_CONFIGURE_COMMAND",  "documentationLabel": "Specify the CTest ``ConfigureCommand`` setting",  "codeSnippet": "CTEST_CONFIGURE_COMMAND" },
{  "type": "variable",  "label": "CTEST_COVERAGE_COMMAND",  "documentationLabel": "Specify the CTest ``CoverageCommand`` setting",  "codeSnippet": "CTEST_COVERAGE_COMMAND" },
{  "type": "variable",  "label": "CTEST_COVERAGE_EXTRA_FLAGS",  "documentationLabel": "Specify the CTest ``CoverageExtraFlags`` setting",  "codeSnippet": "CTEST_COVERAGE_EXTRA_FLAGS" },
{  "type": "variable",  "label": "CTEST_CURL_OPTIONS",  "documentationLabel": "Specify the CTest ``CurlOptions`` setting",  "codeSnippet": "CTEST_CURL_OPTIONS" },
{  "type": "variable",  "label": "CTEST_CVS_CHECKOUT",  "documentationLabel": "Deprecated.  Use ``CTEST_CHECKOUT_COMMAND`` instead.",  "codeSnippet": "CTEST_CVS_CHECKOUT" },
{  "type": "variable",  "label": "CTEST_CVS_COMMAND",  "documentationLabel": "Specify the CTest ``CVSCommand`` setting",  "codeSnippet": "CTEST_CVS_COMMAND" },
{  "type": "variable",  "label": "CTEST_CVS_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``CVSUpdateOptions`` setting",  "codeSnippet": "CTEST_CVS_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_DROP_LOCATION",  "documentationLabel": "Specify the CTest ``DropLocation`` setting",  "codeSnippet": "CTEST_DROP_LOCATION" },
{  "type": "variable",  "label": "CTEST_DROP_METHOD",  "documentationLabel": "Specify the CTest ``DropMethod`` setting",  "codeSnippet": "CTEST_DROP_METHOD" },
{  "type": "variable",  "label": "CTEST_DROP_SITE",  "documentationLabel": "Specify the CTest ``DropSite`` setting",  "codeSnippet": "CTEST_DROP_SITE" },
{  "type": "variable",  "label": "CTEST_DROP_SITE_CDASH",  "documentationLabel": "Specify the CTest ``IsCDash`` setting",  "codeSnippet": "CTEST_DROP_SITE_CDASH" },
{  "type": "variable",  "label": "CTEST_DROP_SITE_PASSWORD",  "documentationLabel": "Specify the CTest ``DropSitePassword`` setting",  "codeSnippet": "CTEST_DROP_SITE_PASSWORD" },
{  "type": "variable",  "label": "CTEST_DROP_SITE_USER",  "documentationLabel": "Specify the CTest ``DropSiteUser`` setting",  "codeSnippet": "CTEST_DROP_SITE_USER" },
{  "type": "variable",  "label": "CTEST_GIT_COMMAND",  "documentationLabel": "Specify the CTest ``GITCommand`` setting",  "codeSnippet": "CTEST_GIT_COMMAND" },
{  "type": "variable",  "label": "CTEST_GIT_UPDATE_CUSTOM",  "documentationLabel": "Specify the CTest ``GITUpdateCustom`` setting",  "codeSnippet": "CTEST_GIT_UPDATE_CUSTOM" },
{  "type": "variable",  "label": "CTEST_GIT_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``GITUpdateOptions`` setting",  "codeSnippet": "CTEST_GIT_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_HG_COMMAND",  "documentationLabel": "Specify the CTest ``HGCommand`` setting",  "codeSnippet": "CTEST_HG_COMMAND" },
{  "type": "variable",  "label": "CTEST_HG_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``HGUpdateOptions`` setting",  "codeSnippet": "CTEST_HG_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_MEMORYCHECK_COMMAND",  "documentationLabel": "Specify the CTest ``MemoryCheckCommand`` setting",  "codeSnippet": "CTEST_MEMORYCHECK_COMMAND" },
{  "type": "variable",  "label": "CTEST_MEMORYCHECK_COMMAND_OPTIONS",  "documentationLabel": "Specify the CTest ``MemoryCheckCommandOptions`` setting",  "codeSnippet": "CTEST_MEMORYCHECK_COMMAND_OPTIONS" },
{  "type": "variable",  "label": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS",  "documentationLabel": "Specify the CTest ``MemoryCheckSanitizerOptions`` setting",  "codeSnippet": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS" },
{  "type": "variable",  "label": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE",  "documentationLabel": "Specify the CTest ``MemoryCheckSuppressionFile`` setting",  "codeSnippet": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE" },
{  "type": "variable",  "label": "CTEST_MEMORYCHECK_TYPE",  "documentationLabel": "Specify the CTest ``MemoryCheckType`` setting",  "codeSnippet": "CTEST_MEMORYCHECK_TYPE" },
{  "type": "variable",  "label": "CTEST_NIGHTLY_START_TIME",  "documentationLabel": "Specify the CTest ``NightlyStartTime`` setting",  "codeSnippet": "CTEST_NIGHTLY_START_TIME" },
{  "type": "variable",  "label": "CTEST_P4_CLIENT",  "documentationLabel": "Specify the CTest ``P4Client`` setting",  "codeSnippet": "CTEST_P4_CLIENT" },
{  "type": "variable",  "label": "CTEST_P4_COMMAND",  "documentationLabel": "Specify the CTest ``P4Command`` setting",  "codeSnippet": "CTEST_P4_COMMAND" },
{  "type": "variable",  "label": "CTEST_P4_OPTIONS",  "documentationLabel": "Specify the CTest ``P4Options`` setting",  "codeSnippet": "CTEST_P4_OPTIONS" },
{  "type": "variable",  "label": "CTEST_P4_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``P4UpdateOptions`` setting",  "codeSnippet": "CTEST_P4_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_SCP_COMMAND",  "documentationLabel": "Specify the CTest ``SCPCommand`` setting",  "codeSnippet": "CTEST_SCP_COMMAND" },
{  "type": "variable",  "label": "CTEST_SITE",  "documentationLabel": "Specify the CTest ``Site`` setting",  "codeSnippet": "CTEST_SITE" },
{  "type": "variable",  "label": "CTEST_SOURCE_DIRECTORY",  "documentationLabel": "Specify the CTest ``SourceDirectory`` setting",  "codeSnippet": "CTEST_SOURCE_DIRECTORY" },
{  "type": "variable",  "label": "CTEST_SVN_COMMAND",  "documentationLabel": "Specify the CTest ``SVNCommand`` setting",  "codeSnippet": "CTEST_SVN_COMMAND" },
{  "type": "variable",  "label": "CTEST_SVN_OPTIONS",  "documentationLabel": "Specify the CTest ``SVNOptions`` setting",  "codeSnippet": "CTEST_SVN_OPTIONS" },
{  "type": "variable",  "label": "CTEST_SVN_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``SVNUpdateOptions`` setting",  "codeSnippet": "CTEST_SVN_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_TEST_TIMEOUT",  "documentationLabel": "Specify the CTest ``TimeOut`` setting",  "codeSnippet": "CTEST_TEST_TIMEOUT" },
{  "type": "variable",  "label": "CTEST_TRIGGER_SITE",  "documentationLabel": "Specify the CTest ``TriggerSite`` setting",  "codeSnippet": "CTEST_TRIGGER_SITE" },
{  "type": "variable",  "label": "CTEST_UPDATE_COMMAND",  "documentationLabel": "Specify the CTest ``UpdateCommand`` setting",  "codeSnippet": "CTEST_UPDATE_COMMAND" },
{  "type": "variable",  "label": "CTEST_UPDATE_OPTIONS",  "documentationLabel": "Specify the CTest ``UpdateOptions`` setting",  "codeSnippet": "CTEST_UPDATE_OPTIONS" },
{  "type": "variable",  "label": "CTEST_UPDATE_VERSION_ONLY",  "documentationLabel": "Specify the CTest ``UpdateVersionOnly`` setting",  "codeSnippet": "CTEST_UPDATE_VERSION_ONLY" },
{  "type": "variable",  "label": "CTEST_USE_LAUNCHERS",  "documentationLabel": "Specify the CTest ``UseLaunchers`` setting",  "codeSnippet": "CTEST_USE_LAUNCHERS" },
{  "type": "variable",  "label": "CYGWIN",  "documentationLabel": "True for Cygwin.",  "codeSnippet": "CYGWIN" },
{  "type": "variable",  "label": "ENV",  "documentationLabel": "Access environment variables.",  "codeSnippet": "ENV" },
{  "type": "variable",  "label": "EXECUTABLE_OUTPUT_PATH",  "documentationLabel": "Old executable location variable.",  "codeSnippet": "EXECUTABLE_OUTPUT_PATH" },
{  "type": "variable",  "label": "LIBRARY_OUTPUT_PATH",  "documentationLabel": "Old library location variable.",  "codeSnippet": "LIBRARY_OUTPUT_PATH" },
{  "type": "variable",  "label": "MINGW",  "documentationLabel": "True when using MinGW",  "codeSnippet": "MINGW" },
{  "type": "variable",  "label": "MSVC",  "documentationLabel": "True when using Microsoft Visual C",  "codeSnippet": "MSVC" },
{  "type": "variable",  "label": "MSVC10",  "documentationLabel": "True when using Microsoft Visual C 10.0",  "codeSnippet": "MSVC10" },
{  "type": "variable",  "label": "MSVC11",  "documentationLabel": "True when using Microsoft Visual C 11.0",  "codeSnippet": "MSVC11" },
{  "type": "variable",  "label": "MSVC12",  "documentationLabel": "True when using Microsoft Visual C 12.0",  "codeSnippet": "MSVC12" },
{  "type": "variable",  "label": "MSVC14",  "documentationLabel": "True when using Microsoft Visual C 14.0",  "codeSnippet": "MSVC14" },
{  "type": "variable",  "label": "MSVC60",  "documentationLabel": "True when using Microsoft Visual C 6.0",  "codeSnippet": "MSVC60" },
{  "type": "variable",  "label": "MSVC70",  "documentationLabel": "True when using Microsoft Visual C 7.0",  "codeSnippet": "MSVC70" },
{  "type": "variable",  "label": "MSVC71",  "documentationLabel": "True when using Microsoft Visual C 7.1",  "codeSnippet": "MSVC71" },
{  "type": "variable",  "label": "MSVC80",  "documentationLabel": "True when using Microsoft Visual C 8.0",  "codeSnippet": "MSVC80" },
{  "type": "variable",  "label": "MSVC90",  "documentationLabel": "True when using Microsoft Visual C 9.0",  "codeSnippet": "MSVC90" },
{  "type": "variable",  "label": "MSVC_IDE",  "documentationLabel": "True when using the Microsoft Visual C IDE",  "codeSnippet": "MSVC_IDE" },
{  "type": "variable",  "label": "MSVC_VERSION",  "documentationLabel": "The version of Microsoft Visual C/C++ being used if any.",  "codeSnippet": "MSVC_VERSION" },
{  "type": "variable",  "label": "PROJECT_BINARY_DIR",  "documentationLabel": "Full path to build directory for project.",  "codeSnippet": "PROJECT_BINARY_DIR" },
{  "type": "variable",  "label": "PROJECT_NAME",  "documentationLabel": "Name of the project given to the project command.",  "codeSnippet": "PROJECT_NAME" },
{  "type": "variable",  "label": "PROJECT_SOURCE_DIR",  "documentationLabel": "Top level source directory for the current project.",  "codeSnippet": "PROJECT_SOURCE_DIR" },
{  "type": "variable",  "label": "PROJECT_VERSION",  "documentationLabel": "Value given to the ``VERSION`` option of the most recent call to the",  "codeSnippet": "PROJECT_VERSION" },
{  "type": "variable",  "label": "PROJECT_VERSION_MAJOR",  "documentationLabel": "First version number component of the ``PROJECT_VERSION``",  "codeSnippet": "PROJECT_VERSION_MAJOR" },
{  "type": "variable",  "label": "PROJECT_VERSION_MINOR",  "documentationLabel": "Second version number component of the ``PROJECT_VERSION``",  "codeSnippet": "PROJECT_VERSION_MINOR" },
{  "type": "variable",  "label": "PROJECT_VERSION_PATCH",  "documentationLabel": "Third version number component of the ``PROJECT_VERSION``",  "codeSnippet": "PROJECT_VERSION_PATCH" },
{  "type": "variable",  "label": "PROJECT_VERSION_TWEAK",  "documentationLabel": "Fourth version number component of the ``PROJECT_VERSION``",  "codeSnippet": "PROJECT_VERSION_TWEAK" },
{  "type": "variable",  "label": "UNIX",  "documentationLabel": "True for UNIX and UNIX like operating systems.",  "codeSnippet": "UNIX" },
{  "type": "variable",  "label": "WIN32",  "documentationLabel": "True on windows systems, including win64.",  "codeSnippet": "WIN32" },
{  "type": "variable",  "label": "WINCE",  "documentationLabel": "True when the ``CMAKE_SYSTEM_NAME`` variable is set",  "codeSnippet": "WINCE" },
{  "type": "variable",  "label": "WINDOWS_PHONE",  "documentationLabel": "True when the ``CMAKE_SYSTEM_NAME`` variable is set",  "codeSnippet": "WINDOWS_PHONE" },
{  "type": "variable",  "label": "WINDOWS_STORE",  "documentationLabel": "True when the ``CMAKE_SYSTEM_NAME`` variable is set",  "codeSnippet": "WINDOWS_STORE" },
{  "type": "variable",  "label": "XCODE_VERSION",  "documentationLabel": "Version of Xcode (Xcode generator only).",  "codeSnippet": "XCODE_VERSION" },
{  "type": "module",  "label": "AddFileDependencies",  "documentationLabel": "ADD_FILE_DEPENDENCIES(source_file depend_files...)",  "codeSnippet": "AddFileDependencies" },
{  "type": "module",  "label": "BundleUtilities",  "documentationLabel": "Functions to help assemble a standalone bundle application.",  "codeSnippet": "BundleUtilities" },
{  "type": "module",  "label": "CMakeAddFortranSubdirectory",  "documentationLabel": "Use MinGW gfortran from VS if a fortran compiler is not found.",  "codeSnippet": "CMakeAddFortranSubdirectory" },
{  "type": "module",  "label": "CMakeBackwardCompatibilityCXX",  "documentationLabel": "define a bunch of backwards compatibility variables",  "codeSnippet": "CMakeBackwardCompatibilityCXX" },
{  "type": "module",  "label": "CMakeDependentOption",  "documentationLabel": "Macro to provide an option dependent on other options.",  "codeSnippet": "CMakeDependentOption" },
{  "type": "module",  "label": "CMakeDetermineVSServicePack",  "documentationLabel": "Deprecated.  Do not use.",  "codeSnippet": "CMakeDetermineVSServicePack" },
{  "type": "module",  "label": "CMakeExpandImportedTargets",  "documentationLabel": "::",  "codeSnippet": "CMakeExpandImportedTargets" },
{  "type": "module",  "label": "CMakeFindDependencyMacro",  "documentationLabel": "::",  "codeSnippet": "CMakeFindDependencyMacro" },
{  "type": "module",  "label": "CMakeFindFrameworks",  "documentationLabel": "helper module to find OSX frameworks",  "codeSnippet": "CMakeFindFrameworks" },
{  "type": "module",  "label": "CMakeFindPackageMode",  "documentationLabel": "",  "codeSnippet": "CMakeFindPackageMode" },
{  "type": "module",  "label": "CMakeForceCompiler",  "documentationLabel": "",  "codeSnippet": "CMakeForceCompiler" },
{  "type": "module",  "label": "CMakeGraphVizOptions",  "documentationLabel": "The builtin graphviz support of CMake.",  "codeSnippet": "CMakeGraphVizOptions" },
{  "type": "module",  "label": "CMakePackageConfigHelpers",  "documentationLabel": "Helpers functions for creating config files that can be included by other",  "codeSnippet": "CMakePackageConfigHelpers" },
{  "type": "module",  "label": "CMakeParseArguments",  "documentationLabel": "",  "codeSnippet": "CMakeParseArguments" },
{  "type": "module",  "label": "CMakePrintHelpers",  "documentationLabel": "Convenience macros for printing properties and variables, useful e.g. for debugging.",  "codeSnippet": "CMakePrintHelpers" },
{  "type": "module",  "label": "CMakePrintSystemInformation",  "documentationLabel": "print system information",  "codeSnippet": "CMakePrintSystemInformation" },
{  "type": "module",  "label": "CMakePushCheckState",  "documentationLabel": "",  "codeSnippet": "CMakePushCheckState" },
{  "type": "module",  "label": "CMakeVerifyManifest",  "documentationLabel": "",  "codeSnippet": "CMakeVerifyManifest" },
{  "type": "module",  "label": "CPack",  "documentationLabel": "Build binary and source package installers.",  "codeSnippet": "CPack" },
{  "type": "module",  "label": "CPackBundle",  "documentationLabel": "CPack Bundle generator (Mac OS X) specific options",  "codeSnippet": "CPackBundle" },
{  "type": "module",  "label": "CPackComponent",  "documentationLabel": "Build binary and source package installers",  "codeSnippet": "CPackComponent" },
{  "type": "module",  "label": "CPackCygwin",  "documentationLabel": "Cygwin CPack generator (Cygwin).",  "codeSnippet": "CPackCygwin" },
{  "type": "module",  "label": "CPackDMG",  "documentationLabel": "DragNDrop CPack generator (Mac OS X).",  "codeSnippet": "CPackDMG" },
{  "type": "module",  "label": "CPackDeb",  "documentationLabel": "The builtin (binary) CPack Deb generator (Unix only)",  "codeSnippet": "CPackDeb" },
{  "type": "module",  "label": "CPackIFW",  "documentationLabel": "This module looks for the location of the command line utilities supplied with",  "codeSnippet": "CPackIFW" },
{  "type": "module",  "label": "CPackNSIS",  "documentationLabel": "CPack NSIS generator specific options",  "codeSnippet": "CPackNSIS" },
{  "type": "module",  "label": "CPackPackageMaker",  "documentationLabel": "PackageMaker CPack generator (Mac OS X).",  "codeSnippet": "CPackPackageMaker" },
{  "type": "module",  "label": "CPackRPM",  "documentationLabel": "The builtin (binary) CPack RPM generator (Unix only)",  "codeSnippet": "CPackRPM" },
{  "type": "module",  "label": "CPackWIX",  "documentationLabel": "CPack WiX generator specific options",  "codeSnippet": "CPackWIX" },
{  "type": "module",  "label": "CTest",  "documentationLabel": "Configure a project for testing with CTest/CDash",  "codeSnippet": "CTest" },
{  "type": "module",  "label": "CTestCoverageCollectGCOV",  "documentationLabel": "This module provides the function ``ctest_coverage_collect_gcov``.",  "codeSnippet": "CTestCoverageCollectGCOV" },
{  "type": "module",  "label": "CTestScriptMode",  "documentationLabel": "",  "codeSnippet": "CTestScriptMode" },
{  "type": "module",  "label": "CTestUseLaunchers",  "documentationLabel": "Set the RULE_LAUNCH_* global properties when CTEST_USE_LAUNCHERS is on.",  "codeSnippet": "CTestUseLaunchers" },
{  "type": "module",  "label": "CheckCCompilerFlag",  "documentationLabel": "Check whether the C compiler supports a given flag.",  "codeSnippet": "CheckCCompilerFlag" },
{  "type": "module",  "label": "CheckCSourceCompiles",  "documentationLabel": "Check if given C source compiles and links into an executable",  "codeSnippet": "CheckCSourceCompiles" },
{  "type": "module",  "label": "CheckCSourceRuns",  "documentationLabel": "Check if the given C source code compiles and runs.",  "codeSnippet": "CheckCSourceRuns" },
{  "type": "module",  "label": "CheckCXXCompilerFlag",  "documentationLabel": "Check whether the CXX compiler supports a given flag.",  "codeSnippet": "CheckCXXCompilerFlag" },
{  "type": "module",  "label": "CheckCXXSourceCompiles",  "documentationLabel": "Check if given C++ source compiles and links into an executable",  "codeSnippet": "CheckCXXSourceCompiles" },
{  "type": "module",  "label": "CheckCXXSourceRuns",  "documentationLabel": "Check if the given C++ source code compiles and runs.",  "codeSnippet": "CheckCXXSourceRuns" },
{  "type": "module",  "label": "CheckCXXSymbolExists",  "documentationLabel": "Check if a symbol exists as a function, variable, or macro in C++",  "codeSnippet": "CheckCXXSymbolExists" },
{  "type": "module",  "label": "CheckFortranFunctionExists",  "documentationLabel": "macro which checks if the Fortran function exists",  "codeSnippet": "CheckFortranFunctionExists" },
{  "type": "module",  "label": "CheckFortranSourceCompiles",  "documentationLabel": "Check if given Fortran source compiles and links into an executable::",  "codeSnippet": "CheckFortranSourceCompiles" },
{  "type": "module",  "label": "CheckFunctionExists",  "documentationLabel": "Check if a C function can be linked",  "codeSnippet": "CheckFunctionExists" },
{  "type": "module",  "label": "CheckIncludeFile",  "documentationLabel": "macro which checks the include file exists.",  "codeSnippet": "CheckIncludeFile" },
{  "type": "module",  "label": "CheckIncludeFileCXX",  "documentationLabel": "Check if the include file exists.",  "codeSnippet": "CheckIncludeFileCXX" },
{  "type": "module",  "label": "CheckIncludeFiles",  "documentationLabel": "Check if the files can be included",  "codeSnippet": "CheckIncludeFiles" },
{  "type": "module",  "label": "CheckLanguage",  "documentationLabel": "Check if a language can be enabled",  "codeSnippet": "CheckLanguage" },
{  "type": "module",  "label": "CheckLibraryExists",  "documentationLabel": "Check if the function exists.",  "codeSnippet": "CheckLibraryExists" },
{  "type": "module",  "label": "CheckPrototypeDefinition",  "documentationLabel": "Check if the protoype we expect is correct.",  "codeSnippet": "CheckPrototypeDefinition" },
{  "type": "module",  "label": "CheckStructHasMember",  "documentationLabel": "Check if the given struct or class has the specified member variable",  "codeSnippet": "CheckStructHasMember" },
{  "type": "module",  "label": "CheckSymbolExists",  "documentationLabel": "Check if a symbol exists as a function, variable, or macro",  "codeSnippet": "CheckSymbolExists" },
{  "type": "module",  "label": "CheckTypeSize",  "documentationLabel": "Check sizeof a type",  "codeSnippet": "CheckTypeSize" },
{  "type": "module",  "label": "CheckVariableExists",  "documentationLabel": "Check if the variable exists.",  "codeSnippet": "CheckVariableExists" },
{  "type": "module",  "label": "Dart",  "documentationLabel": "Configure a project for testing with CTest or old Dart Tcl Client",  "codeSnippet": "Dart" },
{  "type": "module",  "label": "DeployQt4",  "documentationLabel": "Functions to help assemble a standalone Qt4 executable.",  "codeSnippet": "DeployQt4" },
{  "type": "module",  "label": "Documentation",  "documentationLabel": "DocumentationVTK.cmake",  "codeSnippet": "Documentation" },
{  "type": "module",  "label": "ExternalData",  "documentationLabel": "Manage data files stored outside source tree",  "codeSnippet": "ExternalData" },
{  "type": "module",  "label": "ExternalProject",  "documentationLabel": "Create custom targets to build projects in external trees",  "codeSnippet": "ExternalProject" },
{  "type": "module",  "label": "FeatureSummary",  "documentationLabel": "Macros for generating a summary of enabled/disabled features",  "codeSnippet": "FeatureSummary" },
{  "type": "module",  "label": "FindALSA",  "documentationLabel": "Find alsa",  "codeSnippet": "FindALSA" },
{  "type": "module",  "label": "FindASPELL",  "documentationLabel": "Try to find ASPELL",  "codeSnippet": "FindASPELL" },
{  "type": "module",  "label": "FindAVIFile",  "documentationLabel": "Locate AVIFILE library and include paths",  "codeSnippet": "FindAVIFile" },
{  "type": "module",  "label": "FindArmadillo",  "documentationLabel": "Find Armadillo",  "codeSnippet": "FindArmadillo" },
{  "type": "module",  "label": "FindBISON",  "documentationLabel": "Find bison executable and provides macros to generate custom build rules",  "codeSnippet": "FindBISON" },
{  "type": "module",  "label": "FindBLAS",  "documentationLabel": "Find BLAS library",  "codeSnippet": "FindBLAS" },
{  "type": "module",  "label": "FindBZip2",  "documentationLabel": "Try to find BZip2",  "codeSnippet": "FindBZip2" },
{  "type": "module",  "label": "FindBacktrace",  "documentationLabel": "Find provider for backtrace(3).",  "codeSnippet": "FindBacktrace" },
{  "type": "module",  "label": "FindBoost",  "documentationLabel": "Find Boost include dirs and libraries",  "codeSnippet": "FindBoost" },
{  "type": "module",  "label": "FindBullet",  "documentationLabel": "Try to find the Bullet physics engine",  "codeSnippet": "FindBullet" },
{  "type": "module",  "label": "FindCABLE",  "documentationLabel": "Find CABLE",  "codeSnippet": "FindCABLE" },
{  "type": "module",  "label": "FindCUDA",  "documentationLabel": "Tools for building CUDA C files: libraries and build dependencies.",  "codeSnippet": "FindCUDA" },
{  "type": "module",  "label": "FindCURL",  "documentationLabel": "Find curl",  "codeSnippet": "FindCURL" },
{  "type": "module",  "label": "FindCVS",  "documentationLabel": "",  "codeSnippet": "FindCVS" },
{  "type": "module",  "label": "FindCoin3D",  "documentationLabel": "Find Coin3D (Open Inventor)",  "codeSnippet": "FindCoin3D" },
{  "type": "module",  "label": "FindCups",  "documentationLabel": "Try to find the Cups printing system",  "codeSnippet": "FindCups" },
{  "type": "module",  "label": "FindCurses",  "documentationLabel": "Find the curses or ncurses include file and library.",  "codeSnippet": "FindCurses" },
{  "type": "module",  "label": "FindCxxTest",  "documentationLabel": "Find CxxTest",  "codeSnippet": "FindCxxTest" },
{  "type": "module",  "label": "FindCygwin",  "documentationLabel": "this module looks for Cygwin",  "codeSnippet": "FindCygwin" },
{  "type": "module",  "label": "FindDCMTK",  "documentationLabel": "find DCMTK libraries and applications",  "codeSnippet": "FindDCMTK" },
{  "type": "module",  "label": "FindDart",  "documentationLabel": "Find DART",  "codeSnippet": "FindDart" },
{  "type": "module",  "label": "FindDevIL",  "documentationLabel": "",  "codeSnippet": "FindDevIL" },
{  "type": "module",  "label": "FindDoxygen",  "documentationLabel": "This module looks for Doxygen and the path to Graphviz's dot",  "codeSnippet": "FindDoxygen" },
{  "type": "module",  "label": "FindEXPAT",  "documentationLabel": "Find expat",  "codeSnippet": "FindEXPAT" },
{  "type": "module",  "label": "FindFLEX",  "documentationLabel": "Find flex executable and provides a macro to generate custom build rules",  "codeSnippet": "FindFLEX" },
{  "type": "module",  "label": "FindFLTK",  "documentationLabel": "Find the native FLTK includes and library",  "codeSnippet": "FindFLTK" },
{  "type": "module",  "label": "FindFLTK2",  "documentationLabel": "Find the native FLTK2 includes and library",  "codeSnippet": "FindFLTK2" },
{  "type": "module",  "label": "FindFreetype",  "documentationLabel": "Locate FreeType library",  "codeSnippet": "FindFreetype" },
{  "type": "module",  "label": "FindGCCXML",  "documentationLabel": "Find the GCC-XML front-end executable.",  "codeSnippet": "FindGCCXML" },
{  "type": "module",  "label": "FindGDAL",  "documentationLabel": "",  "codeSnippet": "FindGDAL" },
{  "type": "module",  "label": "FindGIF",  "documentationLabel": "",  "codeSnippet": "FindGIF" },
{  "type": "module",  "label": "FindGLEW",  "documentationLabel": "Find the OpenGL Extension Wrangler Library (GLEW)",  "codeSnippet": "FindGLEW" },
{  "type": "module",  "label": "FindGLUT",  "documentationLabel": "try to find glut library and include files.",  "codeSnippet": "FindGLUT" },
{  "type": "module",  "label": "FindGSL",  "documentationLabel": "Find the native GSL includes and libraries.",  "codeSnippet": "FindGSL" },
{  "type": "module",  "label": "FindGTK",  "documentationLabel": "try to find GTK (and glib) and GTKGLArea",  "codeSnippet": "FindGTK" },
{  "type": "module",  "label": "FindGTK2",  "documentationLabel": "FindGTK2.cmake",  "codeSnippet": "FindGTK2" },
{  "type": "module",  "label": "FindGTest",  "documentationLabel": "Locate the Google C++ Testing Framework.",  "codeSnippet": "FindGTest" },
{  "type": "module",  "label": "FindGettext",  "documentationLabel": "Find GNU gettext tools",  "codeSnippet": "FindGettext" },
{  "type": "module",  "label": "FindGit",  "documentationLabel": "",  "codeSnippet": "FindGit" },
{  "type": "module",  "label": "FindGnuTLS",  "documentationLabel": "Try to find the GNU Transport Layer Security library (gnutls)",  "codeSnippet": "FindGnuTLS" },
{  "type": "module",  "label": "FindGnuplot",  "documentationLabel": "this module looks for gnuplot",  "codeSnippet": "FindGnuplot" },
{  "type": "module",  "label": "FindHDF5",  "documentationLabel": "Find HDF5, a library for reading and writing self describing array data.",  "codeSnippet": "FindHDF5" },
{  "type": "module",  "label": "FindHSPELL",  "documentationLabel": "Try to find Hspell",  "codeSnippet": "FindHSPELL" },
{  "type": "module",  "label": "FindHTMLHelp",  "documentationLabel": "This module looks for Microsoft HTML Help Compiler",  "codeSnippet": "FindHTMLHelp" },
{  "type": "module",  "label": "FindHg",  "documentationLabel": "Extract information from a mercurial working copy.",  "codeSnippet": "FindHg" },
{  "type": "module",  "label": "FindITK",  "documentationLabel": "This module no longer exists.",  "codeSnippet": "FindITK" },
{  "type": "module",  "label": "FindIce",  "documentationLabel": "Find the ZeroC Internet Communication Engine (ICE) programs,",  "codeSnippet": "FindIce" },
{  "type": "module",  "label": "FindIcotool",  "documentationLabel": "Find icotool",  "codeSnippet": "FindIcotool" },
{  "type": "module",  "label": "FindImageMagick",  "documentationLabel": "Find the ImageMagick binary suite.",  "codeSnippet": "FindImageMagick" },
{  "type": "module",  "label": "FindIntl",  "documentationLabel": "Find the Gettext libintl headers and libraries.",  "codeSnippet": "FindIntl" },
{  "type": "module",  "label": "FindJNI",  "documentationLabel": "Find JNI java libraries.",  "codeSnippet": "FindJNI" },
{  "type": "module",  "label": "FindJPEG",  "documentationLabel": "Find JPEG",  "codeSnippet": "FindJPEG" },
{  "type": "module",  "label": "FindJasper",  "documentationLabel": "Try to find the Jasper JPEG2000 library",  "codeSnippet": "FindJasper" },
{  "type": "module",  "label": "FindJava",  "documentationLabel": "Find Java",  "codeSnippet": "FindJava" },
{  "type": "module",  "label": "FindKDE3",  "documentationLabel": "Find the KDE3 include and library dirs, KDE preprocessors and define a some macros",  "codeSnippet": "FindKDE3" },
{  "type": "module",  "label": "FindKDE4",  "documentationLabel": "",  "codeSnippet": "FindKDE4" },
{  "type": "module",  "label": "FindLAPACK",  "documentationLabel": "Find LAPACK library",  "codeSnippet": "FindLAPACK" },
{  "type": "module",  "label": "FindLATEX",  "documentationLabel": "Find Latex",  "codeSnippet": "FindLATEX" },
{  "type": "module",  "label": "FindLibArchive",  "documentationLabel": "Find libarchive library and headers",  "codeSnippet": "FindLibArchive" },
{  "type": "module",  "label": "FindLibLZMA",  "documentationLabel": "Find LibLZMA",  "codeSnippet": "FindLibLZMA" },
{  "type": "module",  "label": "FindLibXml2",  "documentationLabel": "Try to find the LibXml2 xml processing library",  "codeSnippet": "FindLibXml2" },
{  "type": "module",  "label": "FindLibXslt",  "documentationLabel": "Try to find the LibXslt library",  "codeSnippet": "FindLibXslt" },
{  "type": "module",  "label": "FindLua",  "documentationLabel": "",  "codeSnippet": "FindLua" },
{  "type": "module",  "label": "FindLua50",  "documentationLabel": "",  "codeSnippet": "FindLua50" },
{  "type": "module",  "label": "FindLua51",  "documentationLabel": "",  "codeSnippet": "FindLua51" },
{  "type": "module",  "label": "FindMFC",  "documentationLabel": "Find MFC on Windows",  "codeSnippet": "FindMFC" },
{  "type": "module",  "label": "FindMPEG",  "documentationLabel": "Find the native MPEG includes and library",  "codeSnippet": "FindMPEG" },
{  "type": "module",  "label": "FindMPEG2",  "documentationLabel": "Find the native MPEG2 includes and library",  "codeSnippet": "FindMPEG2" },
{  "type": "module",  "label": "FindMPI",  "documentationLabel": "Find a Message Passing Interface (MPI) implementation",  "codeSnippet": "FindMPI" },
{  "type": "module",  "label": "FindMatlab",  "documentationLabel": "this module looks for Matlab",  "codeSnippet": "FindMatlab" },
{  "type": "module",  "label": "FindMotif",  "documentationLabel": "Try to find Motif (or lesstif)",  "codeSnippet": "FindMotif" },
{  "type": "module",  "label": "FindOpenAL",  "documentationLabel": "",  "codeSnippet": "FindOpenAL" },
{  "type": "module",  "label": "FindOpenCL",  "documentationLabel": "Try to find OpenCL",  "codeSnippet": "FindOpenCL" },
{  "type": "module",  "label": "FindOpenGL",  "documentationLabel": "FindModule for OpenGL and GLU.",  "codeSnippet": "FindOpenGL" },
{  "type": "module",  "label": "FindOpenMP",  "documentationLabel": "Finds OpenMP support",  "codeSnippet": "FindOpenMP" },
{  "type": "module",  "label": "FindOpenSSL",  "documentationLabel": "Try to find the OpenSSL encryption library",  "codeSnippet": "FindOpenSSL" },
{  "type": "module",  "label": "FindOpenSceneGraph",  "documentationLabel": "Find OpenSceneGraph",  "codeSnippet": "FindOpenSceneGraph" },
{  "type": "module",  "label": "FindOpenThreads",  "documentationLabel": "",  "codeSnippet": "FindOpenThreads" },
{  "type": "module",  "label": "FindPHP4",  "documentationLabel": "Find PHP4",  "codeSnippet": "FindPHP4" },
{  "type": "module",  "label": "FindPNG",  "documentationLabel": "Find the native PNG includes and library",  "codeSnippet": "FindPNG" },
{  "type": "module",  "label": "FindPackageHandleStandardArgs",  "documentationLabel": "",  "codeSnippet": "FindPackageHandleStandardArgs" },
{  "type": "module",  "label": "FindPackageMessage",  "documentationLabel": "",  "codeSnippet": "FindPackageMessage" },
{  "type": "module",  "label": "FindPerl",  "documentationLabel": "Find perl",  "codeSnippet": "FindPerl" },
{  "type": "module",  "label": "FindPerlLibs",  "documentationLabel": "Find Perl libraries",  "codeSnippet": "FindPerlLibs" },
{  "type": "module",  "label": "FindPhysFS",  "documentationLabel": "",  "codeSnippet": "FindPhysFS" },
{  "type": "module",  "label": "FindPike",  "documentationLabel": "Find Pike",  "codeSnippet": "FindPike" },
{  "type": "module",  "label": "FindPkgConfig",  "documentationLabel": "A `pkg-config` module for CMake.",  "codeSnippet": "FindPkgConfig" },
{  "type": "module",  "label": "FindPostgreSQL",  "documentationLabel": "Find the PostgreSQL installation.",  "codeSnippet": "FindPostgreSQL" },
{  "type": "module",  "label": "FindProducer",  "documentationLabel": "",  "codeSnippet": "FindProducer" },
{  "type": "module",  "label": "FindProtobuf",  "documentationLabel": "Locate and configure the Google Protocol Buffers library.",  "codeSnippet": "FindProtobuf" },
{  "type": "module",  "label": "FindPythonInterp",  "documentationLabel": "Find python interpreter",  "codeSnippet": "FindPythonInterp" },
{  "type": "module",  "label": "FindPythonLibs",  "documentationLabel": "Find python libraries",  "codeSnippet": "FindPythonLibs" },
{  "type": "module",  "label": "FindQt",  "documentationLabel": "Searches for all installed versions of Qt.",  "codeSnippet": "FindQt" },
{  "type": "module",  "label": "FindQt3",  "documentationLabel": "Locate Qt include paths and libraries",  "codeSnippet": "FindQt3" },
{  "type": "module",  "label": "FindQt4",  "documentationLabel": "Finding and Using Qt4",  "codeSnippet": "FindQt4" },
{  "type": "module",  "label": "FindQuickTime",  "documentationLabel": "",  "codeSnippet": "FindQuickTime" },
{  "type": "module",  "label": "FindRTI",  "documentationLabel": "Try to find M&S HLA RTI libraries",  "codeSnippet": "FindRTI" },
{  "type": "module",  "label": "FindRuby",  "documentationLabel": "Find Ruby",  "codeSnippet": "FindRuby" },
{  "type": "module",  "label": "FindSDL",  "documentationLabel": "Locate SDL library",  "codeSnippet": "FindSDL" },
{  "type": "module",  "label": "FindSDL_image",  "documentationLabel": "Locate SDL_image library",  "codeSnippet": "FindSDL_image" },
{  "type": "module",  "label": "FindSDL_mixer",  "documentationLabel": "Locate SDL_mixer library",  "codeSnippet": "FindSDL_mixer" },
{  "type": "module",  "label": "FindSDL_net",  "documentationLabel": "Locate SDL_net library",  "codeSnippet": "FindSDL_net" },
{  "type": "module",  "label": "FindSDL_sound",  "documentationLabel": "Locates the SDL_sound library",  "codeSnippet": "FindSDL_sound" },
{  "type": "module",  "label": "FindSDL_ttf",  "documentationLabel": "Locate SDL_ttf library",  "codeSnippet": "FindSDL_ttf" },
{  "type": "module",  "label": "FindSWIG",  "documentationLabel": "Find SWIG",  "codeSnippet": "FindSWIG" },
{  "type": "module",  "label": "FindSelfPackers",  "documentationLabel": "Find upx",  "codeSnippet": "FindSelfPackers" },
{  "type": "module",  "label": "FindSquish",  "documentationLabel": "-- Typical Use",  "codeSnippet": "FindSquish" },
{  "type": "module",  "label": "FindSubversion",  "documentationLabel": "Extract information from a subversion working copy",  "codeSnippet": "FindSubversion" },
{  "type": "module",  "label": "FindTCL",  "documentationLabel": "TK_INTERNAL_PATH was removed.",  "codeSnippet": "FindTCL" },
{  "type": "module",  "label": "FindTIFF",  "documentationLabel": "Find TIFF library",  "codeSnippet": "FindTIFF" },
{  "type": "module",  "label": "FindTclStub",  "documentationLabel": "TCL_STUB_LIBRARY_DEBUG and TK_STUB_LIBRARY_DEBUG were removed.",  "codeSnippet": "FindTclStub" },
{  "type": "module",  "label": "FindTclsh",  "documentationLabel": "Find tclsh",  "codeSnippet": "FindTclsh" },
{  "type": "module",  "label": "FindThreads",  "documentationLabel": "This module determines the thread library of the system.",  "codeSnippet": "FindThreads" },
{  "type": "module",  "label": "FindUnixCommands",  "documentationLabel": "Find Unix commands, including the ones from Cygwin",  "codeSnippet": "FindUnixCommands" },
{  "type": "module",  "label": "FindVTK",  "documentationLabel": "This module no longer exists.",  "codeSnippet": "FindVTK" },
{  "type": "module",  "label": "FindWget",  "documentationLabel": "Find wget",  "codeSnippet": "FindWget" },
{  "type": "module",  "label": "FindWish",  "documentationLabel": "Find wish installation",  "codeSnippet": "FindWish" },
{  "type": "module",  "label": "FindX11",  "documentationLabel": "Find X11 installation",  "codeSnippet": "FindX11" },
{  "type": "module",  "label": "FindXMLRPC",  "documentationLabel": "Find xmlrpc",  "codeSnippet": "FindXMLRPC" },
{  "type": "module",  "label": "FindXercesC",  "documentationLabel": "Find the Apache Xerces-C++ validating XML parser headers and libraries.",  "codeSnippet": "FindXercesC" },
{  "type": "module",  "label": "FindZLIB",  "documentationLabel": "Find the native ZLIB includes and library.",  "codeSnippet": "FindZLIB" },
{  "type": "module",  "label": "Findosg",  "documentationLabel": "",  "codeSnippet": "Findosg" },
{  "type": "module",  "label": "FindosgAnimation",  "documentationLabel": "",  "codeSnippet": "FindosgAnimation" },
{  "type": "module",  "label": "FindosgDB",  "documentationLabel": "",  "codeSnippet": "FindosgDB" },
{  "type": "module",  "label": "FindosgFX",  "documentationLabel": "",  "codeSnippet": "FindosgFX" },
{  "type": "module",  "label": "FindosgGA",  "documentationLabel": "",  "codeSnippet": "FindosgGA" },
{  "type": "module",  "label": "FindosgIntrospection",  "documentationLabel": "",  "codeSnippet": "FindosgIntrospection" },
{  "type": "module",  "label": "FindosgManipulator",  "documentationLabel": "",  "codeSnippet": "FindosgManipulator" },
{  "type": "module",  "label": "FindosgParticle",  "documentationLabel": "",  "codeSnippet": "FindosgParticle" },
{  "type": "module",  "label": "FindosgPresentation",  "documentationLabel": "",  "codeSnippet": "FindosgPresentation" },
{  "type": "module",  "label": "FindosgProducer",  "documentationLabel": "",  "codeSnippet": "FindosgProducer" },
{  "type": "module",  "label": "FindosgQt",  "documentationLabel": "",  "codeSnippet": "FindosgQt" },
{  "type": "module",  "label": "FindosgShadow",  "documentationLabel": "",  "codeSnippet": "FindosgShadow" },
{  "type": "module",  "label": "FindosgSim",  "documentationLabel": "",  "codeSnippet": "FindosgSim" },
{  "type": "module",  "label": "FindosgTerrain",  "documentationLabel": "",  "codeSnippet": "FindosgTerrain" },
{  "type": "module",  "label": "FindosgText",  "documentationLabel": "",  "codeSnippet": "FindosgText" },
{  "type": "module",  "label": "FindosgUtil",  "documentationLabel": "",  "codeSnippet": "FindosgUtil" },
{  "type": "module",  "label": "FindosgViewer",  "documentationLabel": "",  "codeSnippet": "FindosgViewer" },
{  "type": "module",  "label": "FindosgVolume",  "documentationLabel": "",  "codeSnippet": "FindosgVolume" },
{  "type": "module",  "label": "FindosgWidget",  "documentationLabel": "",  "codeSnippet": "FindosgWidget" },
{  "type": "module",  "label": "Findosg_functions",  "documentationLabel": "",  "codeSnippet": "Findosg_functions" },
{  "type": "module",  "label": "FindwxWidgets",  "documentationLabel": "Find a wxWidgets (a.k.a., wxWindows) installation.",  "codeSnippet": "FindwxWidgets" },
{  "type": "module",  "label": "FindwxWindows",  "documentationLabel": "Find wxWindows (wxWidgets) installation",  "codeSnippet": "FindwxWindows" },
{  "type": "module",  "label": "FortranCInterface",  "documentationLabel": "Fortran/C Interface Detection",  "codeSnippet": "FortranCInterface" },
{  "type": "module",  "label": "GNUInstallDirs",  "documentationLabel": "Define GNU standard installation directories",  "codeSnippet": "GNUInstallDirs" },
{  "type": "module",  "label": "GenerateExportHeader",  "documentationLabel": "Function for generation of export macros for libraries",  "codeSnippet": "GenerateExportHeader" },
{  "type": "module",  "label": "GetPrerequisites",  "documentationLabel": "Functions to analyze and list executable file prerequisites.",  "codeSnippet": "GetPrerequisites" },
{  "type": "module",  "label": "InstallRequiredSystemLibraries",  "documentationLabel": "",  "codeSnippet": "InstallRequiredSystemLibraries" },
{  "type": "module",  "label": "MacroAddFileDependencies",  "documentationLabel": "MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...)",  "codeSnippet": "MacroAddFileDependencies" },
{  "type": "module",  "label": "ProcessorCount",  "documentationLabel": "ProcessorCount(var)",  "codeSnippet": "ProcessorCount" },
{  "type": "module",  "label": "SelectLibraryConfigurations",  "documentationLabel": "",  "codeSnippet": "SelectLibraryConfigurations" },
{  "type": "module",  "label": "SquishTestScript",  "documentationLabel": "",  "codeSnippet": "SquishTestScript" },
{  "type": "module",  "label": "TestBigEndian",  "documentationLabel": "Define macro to determine endian type",  "codeSnippet": "TestBigEndian" },
{  "type": "module",  "label": "TestCXXAcceptsFlag",  "documentationLabel": "Deprecated.  See ``CheckCXXCompilerFlag``.",  "codeSnippet": "TestCXXAcceptsFlag" },
{  "type": "module",  "label": "TestForANSIForScope",  "documentationLabel": "Check for ANSI for scope support",  "codeSnippet": "TestForANSIForScope" },
{  "type": "module",  "label": "TestForANSIStreamHeaders",  "documentationLabel": "Test for compiler support of ANSI stream headers iostream, etc.",  "codeSnippet": "TestForANSIStreamHeaders" },
{  "type": "module",  "label": "TestForSSTREAM",  "documentationLabel": "Test for compiler support of ANSI sstream header",  "codeSnippet": "TestForSSTREAM" },
{  "type": "module",  "label": "TestForSTDNamespace",  "documentationLabel": "Test for std:: namespace support",  "codeSnippet": "TestForSTDNamespace" },
{  "type": "module",  "label": "UseEcos",  "documentationLabel": "This module defines variables and macros required to build eCos application.",  "codeSnippet": "UseEcos" },
{  "type": "module",  "label": "UseJava",  "documentationLabel": "Use Module for Java",  "codeSnippet": "UseJava" },
{  "type": "module",  "label": "UseJavaClassFilelist",  "documentationLabel": "",  "codeSnippet": "UseJavaClassFilelist" },
{  "type": "module",  "label": "UseJavaSymlinks",  "documentationLabel": "",  "codeSnippet": "UseJavaSymlinks" },
{  "type": "module",  "label": "UsePkgConfig",  "documentationLabel": "Obsolete pkg-config module for CMake, use FindPkgConfig instead.",  "codeSnippet": "UsePkgConfig" },
{  "type": "module",  "label": "UseSWIG",  "documentationLabel": "Defines the following macros for use with SWIG:",  "codeSnippet": "UseSWIG" },
{  "type": "module",  "label": "Use_wxWindows",  "documentationLabel": "",  "codeSnippet": "Use_wxWindows" },
{  "type": "module",  "label": "UsewxWidgets",  "documentationLabel": "Convenience include for using wxWidgets library.",  "codeSnippet": "UsewxWidgets" },
{  "type": "module",  "label": "WriteBasicConfigVersionFile",  "documentationLabel": "",  "codeSnippet": "WriteBasicConfigVersionFile" },
{  "type": "module",  "label": "WriteCompilerDetectionHeader",  "documentationLabel": "This module provides the function write_compiler_detection_header().",  "codeSnippet": "WriteCompilerDetectionHeader" },
{  "type": "property",  "label": "<CONFIG>_OUTPUT_NAME",  "documentationLabel": "Old per-configuration target file base name.",  "codeSnippet": "<CONFIG>_OUTPUT_NAME" },
{  "type": "property",  "label": "<CONFIG>_POSTFIX",  "documentationLabel": "Postfix to append to the target file name for configuration <CONFIG>.",  "codeSnippet": "<CONFIG>_POSTFIX" },
{  "type": "property",  "label": "<LANG>_VISIBILITY_PRESET",  "documentationLabel": "Value for symbol visibility compile flags",  "codeSnippet": "<LANG>_VISIBILITY_PRESET" },
{  "type": "property",  "label": "ABSTRACT",  "documentationLabel": "Is this source file an abstract class.",  "codeSnippet": "ABSTRACT" },
{  "type": "property",  "label": "ADDITIONAL_MAKE_CLEAN_FILES",  "documentationLabel": "Additional files to clean during the make clean stage.",  "codeSnippet": "ADDITIONAL_MAKE_CLEAN_FILES" },
{  "type": "property",  "label": "ADVANCED",  "documentationLabel": "True if entry should be hidden by default in GUIs.",  "codeSnippet": "ADVANCED" },
{  "type": "property",  "label": "ALIASED_TARGET",  "documentationLabel": "Name of target aliased by this target.",  "codeSnippet": "ALIASED_TARGET" },
{  "type": "property",  "label": "ALLOW_DUPLICATE_CUSTOM_TARGETS",  "documentationLabel": "Allow duplicate custom targets to be created.",  "codeSnippet": "ALLOW_DUPLICATE_CUSTOM_TARGETS" },
{  "type": "property",  "label": "ANDROID_API",  "documentationLabel": "Set the Android Target API version (e.g. ``15``).  The version number",  "codeSnippet": "ANDROID_API" },
{  "type": "property",  "label": "ANDROID_API_MIN",  "documentationLabel": "Set the Android MIN API version (e.g. ``9``).  The version number",  "codeSnippet": "ANDROID_API_MIN" },
{  "type": "property",  "label": "ANDROID_GUI",  "documentationLabel": "Build an executable as an application package on Android.",  "codeSnippet": "ANDROID_GUI" },
{  "type": "property",  "label": "ARCHIVE_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory in which to build ARCHIVE target files.",  "codeSnippet": "ARCHIVE_OUTPUT_DIRECTORY" },
{  "type": "property",  "label": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for ARCHIVE target files.",  "codeSnippet": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "property",  "label": "ARCHIVE_OUTPUT_NAME",  "documentationLabel": "Output name for ARCHIVE target files.",  "codeSnippet": "ARCHIVE_OUTPUT_NAME" },
{  "type": "property",  "label": "ARCHIVE_OUTPUT_NAME_<CONFIG>",  "documentationLabel": "Per-configuration output name for ARCHIVE target files.",  "codeSnippet": "ARCHIVE_OUTPUT_NAME_<CONFIG>" },
{  "type": "property",  "label": "ATTACHED_FILES",  "documentationLabel": "Attach a list of files to a dashboard submission.",  "codeSnippet": "ATTACHED_FILES" },
{  "type": "property",  "label": "ATTACHED_FILES_ON_FAIL",  "documentationLabel": "Attach a list of files to a dashboard submission if the test fails.",  "codeSnippet": "ATTACHED_FILES_ON_FAIL" },
{  "type": "property",  "label": "AUTOGEN_TARGETS_FOLDER",  "documentationLabel": "Name of ``FOLDER`` for ``*_automoc`` targets that are added automatically by",  "codeSnippet": "AUTOGEN_TARGETS_FOLDER" },
{  "type": "property",  "label": "AUTOGEN_TARGET_DEPENDS",  "documentationLabel": "Target dependencies of the corresponding ``_automoc`` target.",  "codeSnippet": "AUTOGEN_TARGET_DEPENDS" },
{  "type": "property",  "label": "AUTOMOC",  "documentationLabel": "Should the target be processed with automoc (for Qt projects).",  "codeSnippet": "AUTOMOC" },
{  "type": "property",  "label": "AUTOMOC_MOC_OPTIONS",  "documentationLabel": "Additional options for moc when using ``AUTOMOC``",  "codeSnippet": "AUTOMOC_MOC_OPTIONS" },
{  "type": "property",  "label": "AUTOMOC_TARGETS_FOLDER",  "documentationLabel": "Name of ``FOLDER`` for ``*_automoc`` targets that are added automatically by",  "codeSnippet": "AUTOMOC_TARGETS_FOLDER" },
{  "type": "property",  "label": "AUTORCC",  "documentationLabel": "Should the target be processed with autorcc (for Qt projects).",  "codeSnippet": "AUTORCC" },
{  "type": "property",  "label": "AUTORCC_OPTIONS",  "documentationLabel": "Additional options for ``rcc`` when using ``AUTORCC``",  "codeSnippet": "AUTORCC_OPTIONS" },
{  "type": "property",  "label": "AUTORCC_OPTIONS",  "documentationLabel": "Additional options for ``rcc`` when using ``AUTORCC``",  "codeSnippet": "AUTORCC_OPTIONS" },
{  "type": "property",  "label": "AUTOUIC",  "documentationLabel": "Should the target be processed with autouic (for Qt projects).",  "codeSnippet": "AUTOUIC" },
{  "type": "property",  "label": "AUTOUIC_OPTIONS",  "documentationLabel": "Additional options for ``uic`` when using ``AUTOUIC``",  "codeSnippet": "AUTOUIC_OPTIONS" },
{  "type": "property",  "label": "AUTOUIC_OPTIONS",  "documentationLabel": "Additional options for ``uic`` when using ``AUTOUIC``",  "codeSnippet": "AUTOUIC_OPTIONS" },
{  "type": "property",  "label": "BUILD_WITH_INSTALL_RPATH",  "documentationLabel": "Should build tree targets have install tree rpaths.",  "codeSnippet": "BUILD_WITH_INSTALL_RPATH" },
{  "type": "property",  "label": "BUNDLE",  "documentationLabel": "This target is a CFBundle on the Mac.",  "codeSnippet": "BUNDLE" },
{  "type": "property",  "label": "BUNDLE_EXTENSION",  "documentationLabel": "The file extension used to name a BUNDLE target on the Mac.",  "codeSnippet": "BUNDLE_EXTENSION" },
{  "type": "property",  "label": "CACHE_VARIABLES",  "documentationLabel": "List of cache variables available in the current directory.",  "codeSnippet": "CACHE_VARIABLES" },
{  "type": "property",  "label": "CLEAN_NO_CUSTOM",  "documentationLabel": "Should the output of custom commands be left.",  "codeSnippet": "CLEAN_NO_CUSTOM" },
{  "type": "property",  "label": "CMAKE_CONFIGURE_DEPENDS",  "documentationLabel": "Tell CMake about additional input files to the configuration process.",  "codeSnippet": "CMAKE_CONFIGURE_DEPENDS" },
{  "type": "property",  "label": "CMAKE_CXX_KNOWN_FEATURES",  "documentationLabel": "List of C++ features known to this version of CMake.",  "codeSnippet": "CMAKE_CXX_KNOWN_FEATURES" },
{  "type": "property",  "label": "CMAKE_C_KNOWN_FEATURES",  "documentationLabel": "List of C features known to this version of CMake.",  "codeSnippet": "CMAKE_C_KNOWN_FEATURES" },
{  "type": "property",  "label": "COMPATIBLE_INTERFACE_BOOL",  "documentationLabel": "Properties which must be compatible with their link interface",  "codeSnippet": "COMPATIBLE_INTERFACE_BOOL" },
{  "type": "property",  "label": "COMPATIBLE_INTERFACE_NUMBER_MAX",  "documentationLabel": "Properties whose maximum value from the link interface will be used.",  "codeSnippet": "COMPATIBLE_INTERFACE_NUMBER_MAX" },
{  "type": "property",  "label": "COMPATIBLE_INTERFACE_NUMBER_MIN",  "documentationLabel": "Properties whose maximum value from the link interface will be used.",  "codeSnippet": "COMPATIBLE_INTERFACE_NUMBER_MIN" },
{  "type": "property",  "label": "COMPATIBLE_INTERFACE_STRING",  "documentationLabel": "Properties which must be string-compatible with their link interface",  "codeSnippet": "COMPATIBLE_INTERFACE_STRING" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS",  "documentationLabel": "Preprocessor definitions for compiling a directory's sources.",  "codeSnippet": "COMPILE_DEFINITIONS" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS",  "documentationLabel": "Preprocessor definitions for compiling a directory's sources.",  "codeSnippet": "COMPILE_DEFINITIONS" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS",  "documentationLabel": "Preprocessor definitions for compiling a directory's sources.",  "codeSnippet": "COMPILE_DEFINITIONS" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS_<CONFIG>",  "documentationLabel": "Ignored.  See CMake Policy ``CMP0043``.",  "codeSnippet": "COMPILE_DEFINITIONS_<CONFIG>" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS_<CONFIG>",  "documentationLabel": "Ignored.  See CMake Policy ``CMP0043``.",  "codeSnippet": "COMPILE_DEFINITIONS_<CONFIG>" },
{  "type": "property",  "label": "COMPILE_DEFINITIONS_<CONFIG>",  "documentationLabel": "Ignored.  See CMake Policy ``CMP0043``.",  "codeSnippet": "COMPILE_DEFINITIONS_<CONFIG>" },
{  "type": "property",  "label": "COMPILE_FEATURES",  "documentationLabel": "Compiler features enabled for this target.",  "codeSnippet": "COMPILE_FEATURES" },
{  "type": "property",  "label": "COMPILE_FLAGS",  "documentationLabel": "Additional flags to be added when compiling this source file.",  "codeSnippet": "COMPILE_FLAGS" },
{  "type": "property",  "label": "COMPILE_FLAGS",  "documentationLabel": "Additional flags to be added when compiling this source file.",  "codeSnippet": "COMPILE_FLAGS" },
{  "type": "property",  "label": "COMPILE_OPTIONS",  "documentationLabel": "List of options to pass to the compiler.",  "codeSnippet": "COMPILE_OPTIONS" },
{  "type": "property",  "label": "COMPILE_OPTIONS",  "documentationLabel": "List of options to pass to the compiler.",  "codeSnippet": "COMPILE_OPTIONS" },
{  "type": "property",  "label": "COMPILE_PDB_NAME",  "documentationLabel": "Output name for the MS debug symbol ``.pdb`` file generated by the",  "codeSnippet": "COMPILE_PDB_NAME" },
{  "type": "property",  "label": "COMPILE_PDB_NAME_<CONFIG>",  "documentationLabel": "Per-configuration output name for the MS debug symbol ``.pdb`` file",  "codeSnippet": "COMPILE_PDB_NAME_<CONFIG>" },
{  "type": "property",  "label": "COMPILE_PDB_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory for the MS debug symbol ``.pdb`` file",  "codeSnippet": "COMPILE_PDB_OUTPUT_DIRECTORY" },
{  "type": "property",  "label": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for the MS debug symbol ``.pdb`` file",  "codeSnippet": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "property",  "label": "COST",  "documentationLabel": "Set this to a floating point value. Tests in a test set will be run in descending order of cost.",  "codeSnippet": "COST" },
{  "type": "property",  "label": "CPACK_NEVER_OVERWRITE",  "documentationLabel": "Request that this file not be overwritten on install or reinstall.",  "codeSnippet": "CPACK_NEVER_OVERWRITE" },
{  "type": "property",  "label": "CPACK_PERMANENT",  "documentationLabel": "Request that this file not be removed on uninstall.",  "codeSnippet": "CPACK_PERMANENT" },
{  "type": "property",  "label": "CPACK_WIX_ACL",  "documentationLabel": "Specifies access permissions for files or directories",  "codeSnippet": "CPACK_WIX_ACL" },
{  "type": "property",  "label": "CXX_EXTENSIONS",  "documentationLabel": "Boolean specifying whether compiler specific extensions are requested.",  "codeSnippet": "CXX_EXTENSIONS" },
{  "type": "property",  "label": "CXX_STANDARD",  "documentationLabel": "The C++ standard whose features are requested to build this target.",  "codeSnippet": "CXX_STANDARD" },
{  "type": "property",  "label": "CXX_STANDARD_REQUIRED",  "documentationLabel": "Boolean describing whether the value of ``CXX_STANDARD`` is a requirement.",  "codeSnippet": "CXX_STANDARD_REQUIRED" },
{  "type": "property",  "label": "C_EXTENSIONS",  "documentationLabel": "Boolean specifying whether compiler specific extensions are requested.",  "codeSnippet": "C_EXTENSIONS" },
{  "type": "property",  "label": "C_STANDARD",  "documentationLabel": "The C standard whose features are requested to build this target.",  "codeSnippet": "C_STANDARD" },
{  "type": "property",  "label": "C_STANDARD_REQUIRED",  "documentationLabel": "Boolean describing whether the value of ``C_STANDARD`` is a requirement.",  "codeSnippet": "C_STANDARD_REQUIRED" },
{  "type": "property",  "label": "DEBUG_CONFIGURATIONS",  "documentationLabel": "Specify which configurations are for debugging.",  "codeSnippet": "DEBUG_CONFIGURATIONS" },
{  "type": "property",  "label": "DEBUG_POSTFIX",  "documentationLabel": "See target property <CONFIG>_POSTFIX.",  "codeSnippet": "DEBUG_POSTFIX" },
{  "type": "property",  "label": "DEFINE_SYMBOL",  "documentationLabel": "Define a symbol when compiling this target's sources.",  "codeSnippet": "DEFINE_SYMBOL" },
{  "type": "property",  "label": "DEFINITIONS",  "documentationLabel": "For CMake 2.4 compatibility only.  Use COMPILE_DEFINITIONS instead.",  "codeSnippet": "DEFINITIONS" },
{  "type": "property",  "label": "DEPENDS",  "documentationLabel": "Specifies that this test should only be run after the specified list of tests.",  "codeSnippet": "DEPENDS" },
{  "type": "property",  "label": "DISABLED_FEATURES",  "documentationLabel": "List of features which are disabled during the CMake run.",  "codeSnippet": "DISABLED_FEATURES" },
{  "type": "property",  "label": "ECLIPSE_EXTRA_NATURES",  "documentationLabel": "List of natures to add to the generated Eclipse project file.",  "codeSnippet": "ECLIPSE_EXTRA_NATURES" },
{  "type": "property",  "label": "ENABLED_FEATURES",  "documentationLabel": "List of features which are enabled during the CMake run.",  "codeSnippet": "ENABLED_FEATURES" },
{  "type": "property",  "label": "ENABLED_LANGUAGES",  "documentationLabel": "Read-only property that contains the list of currently enabled languages",  "codeSnippet": "ENABLED_LANGUAGES" },
{  "type": "property",  "label": "ENABLE_EXPORTS",  "documentationLabel": "Specify whether an executable exports symbols for loadable modules.",  "codeSnippet": "ENABLE_EXPORTS" },
{  "type": "property",  "label": "ENVIRONMENT",  "documentationLabel": "Specify environment variables that should be defined for running a test.",  "codeSnippet": "ENVIRONMENT" },
{  "type": "property",  "label": "EXCLUDE_FROM_ALL",  "documentationLabel": "Exclude the directory from the all target of its parent.",  "codeSnippet": "EXCLUDE_FROM_ALL" },
{  "type": "property",  "label": "EXCLUDE_FROM_ALL",  "documentationLabel": "Exclude the directory from the all target of its parent.",  "codeSnippet": "EXCLUDE_FROM_ALL" },
{  "type": "property",  "label": "EXCLUDE_FROM_DEFAULT_BUILD",  "documentationLabel": "Exclude target from 'Build Solution'.",  "codeSnippet": "EXCLUDE_FROM_DEFAULT_BUILD" },
{  "type": "property",  "label": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>",  "documentationLabel": "Per-configuration version of target exclusion from 'Build Solution'.",  "codeSnippet": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>" },
{  "type": "property",  "label": "EXPORT_NAME",  "documentationLabel": "Exported name for target files.",  "codeSnippet": "EXPORT_NAME" },
{  "type": "property",  "label": "EXTERNAL_OBJECT",  "documentationLabel": "If set to true then this is an object file.",  "codeSnippet": "EXTERNAL_OBJECT" },
{  "type": "property",  "label": "EchoString",  "documentationLabel": "A message to be displayed when the target is built.",  "codeSnippet": "EchoString" },
{  "type": "property",  "label": "FAIL_REGULAR_EXPRESSION",  "documentationLabel": "If the output matches this regular expression the test will fail.",  "codeSnippet": "FAIL_REGULAR_EXPRESSION" },
{  "type": "property",  "label": "FIND_LIBRARY_USE_LIB64_PATHS",  "documentationLabel": "Whether FIND_LIBRARY should automatically search lib64 directories.",  "codeSnippet": "FIND_LIBRARY_USE_LIB64_PATHS" },
{  "type": "property",  "label": "FIND_LIBRARY_USE_OPENBSD_VERSIONING",  "documentationLabel": "Whether FIND_LIBRARY should find OpenBSD-style shared libraries.",  "codeSnippet": "FIND_LIBRARY_USE_OPENBSD_VERSIONING" },
{  "type": "property",  "label": "FOLDER",  "documentationLabel": "Set the folder name. Use to organize targets in an IDE.",  "codeSnippet": "FOLDER" },
{  "type": "property",  "label": "FRAMEWORK",  "documentationLabel": "This target is a framework on the Mac.",  "codeSnippet": "FRAMEWORK" },
{  "type": "property",  "label": "Fortran_FORMAT",  "documentationLabel": "Set to FIXED or FREE to indicate the Fortran source layout.",  "codeSnippet": "Fortran_FORMAT" },
{  "type": "property",  "label": "Fortran_FORMAT",  "documentationLabel": "Set to FIXED or FREE to indicate the Fortran source layout.",  "codeSnippet": "Fortran_FORMAT" },
{  "type": "property",  "label": "Fortran_MODULE_DIRECTORY",  "documentationLabel": "Specify output directory for Fortran modules provided by the target.",  "codeSnippet": "Fortran_MODULE_DIRECTORY" },
{  "type": "property",  "label": "GENERATED",  "documentationLabel": "Is this source file generated as part of the build process.",  "codeSnippet": "GENERATED" },
{  "type": "property",  "label": "GENERATOR_FILE_NAME",  "documentationLabel": "Generator's file for this target.",  "codeSnippet": "GENERATOR_FILE_NAME" },
{  "type": "property",  "label": "GLOBAL_DEPENDS_DEBUG_MODE",  "documentationLabel": "Enable global target dependency graph debug mode.",  "codeSnippet": "GLOBAL_DEPENDS_DEBUG_MODE" },
{  "type": "property",  "label": "GLOBAL_DEPENDS_NO_CYCLES",  "documentationLabel": "Disallow global target dependency graph cycles.",  "codeSnippet": "GLOBAL_DEPENDS_NO_CYCLES" },
{  "type": "property",  "label": "GNUtoMS",  "documentationLabel": "Convert GNU import library (.dll.a) to MS format (.lib).",  "codeSnippet": "GNUtoMS" },
{  "type": "property",  "label": "HAS_CXX",  "documentationLabel": "Link the target using the C++ linker tool (obsolete).",  "codeSnippet": "HAS_CXX" },
{  "type": "property",  "label": "HEADER_FILE_ONLY",  "documentationLabel": "Is this source file only a header file.",  "codeSnippet": "HEADER_FILE_ONLY" },
{  "type": "property",  "label": "HELPSTRING",  "documentationLabel": "Help associated with entry in GUIs.",  "codeSnippet": "HELPSTRING" },
{  "type": "property",  "label": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",  "documentationLabel": "Specify #include line transforms for dependencies in a directory.",  "codeSnippet": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM" },
{  "type": "property",  "label": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",  "documentationLabel": "Specify #include line transforms for dependencies in a directory.",  "codeSnippet": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM" },
{  "type": "property",  "label": "IMPORTED",  "documentationLabel": "Read-only indication of whether a target is IMPORTED.",  "codeSnippet": "IMPORTED" },
{  "type": "property",  "label": "IMPORTED_CONFIGURATIONS",  "documentationLabel": "Configurations provided for an IMPORTED target.",  "codeSnippet": "IMPORTED_CONFIGURATIONS" },
{  "type": "property",  "label": "IMPORTED_IMPLIB",  "documentationLabel": "Full path to the import library for an IMPORTED target.",  "codeSnippet": "IMPORTED_IMPLIB" },
{  "type": "property",  "label": "IMPORTED_IMPLIB_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_IMPLIB property.",  "codeSnippet": "IMPORTED_IMPLIB_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_LINK_DEPENDENT_LIBRARIES",  "documentationLabel": "Dependent shared libraries of an imported shared library.",  "codeSnippet": "IMPORTED_LINK_DEPENDENT_LIBRARIES" },
{  "type": "property",  "label": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.",  "codeSnippet": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_LANGUAGES",  "documentationLabel": "Languages compiled into an IMPORTED static library.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_LANGUAGES" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_LIBRARIES",  "documentationLabel": "Transitive link interface of an IMPORTED target.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_LIBRARIES" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_MULTIPLICITY",  "documentationLabel": "Repetition count for cycles of IMPORTED static libraries.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_MULTIPLICITY" },
{  "type": "property",  "label": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.",  "codeSnippet": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_LOCATION",  "documentationLabel": "Full path to the main file on disk for an IMPORTED target.",  "codeSnippet": "IMPORTED_LOCATION" },
{  "type": "property",  "label": "IMPORTED_LOCATION_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_LOCATION property.",  "codeSnippet": "IMPORTED_LOCATION_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_NO_SONAME",  "documentationLabel": "Specifies that an IMPORTED shared library target has no 'soname'.",  "codeSnippet": "IMPORTED_NO_SONAME" },
{  "type": "property",  "label": "IMPORTED_NO_SONAME_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_NO_SONAME property.",  "codeSnippet": "IMPORTED_NO_SONAME_<CONFIG>" },
{  "type": "property",  "label": "IMPORTED_SONAME",  "documentationLabel": "The 'soname' of an IMPORTED target of shared library type.",  "codeSnippet": "IMPORTED_SONAME" },
{  "type": "property",  "label": "IMPORTED_SONAME_<CONFIG>",  "documentationLabel": "<CONFIG>-specific version of IMPORTED_SONAME property.",  "codeSnippet": "IMPORTED_SONAME_<CONFIG>" },
{  "type": "property",  "label": "IMPORT_PREFIX",  "documentationLabel": "What comes before the import library name.",  "codeSnippet": "IMPORT_PREFIX" },
{  "type": "property",  "label": "IMPORT_SUFFIX",  "documentationLabel": "What comes after the import library name.",  "codeSnippet": "IMPORT_SUFFIX" },
{  "type": "property",  "label": "INCLUDE_DIRECTORIES",  "documentationLabel": "List of preprocessor include file search directories.",  "codeSnippet": "INCLUDE_DIRECTORIES" },
{  "type": "property",  "label": "INCLUDE_DIRECTORIES",  "documentationLabel": "List of preprocessor include file search directories.",  "codeSnippet": "INCLUDE_DIRECTORIES" },
{  "type": "property",  "label": "INCLUDE_REGULAR_EXPRESSION",  "documentationLabel": "Include file scanning regular expression.",  "codeSnippet": "INCLUDE_REGULAR_EXPRESSION" },
{  "type": "property",  "label": "INSTALL_NAME_DIR",  "documentationLabel": "Mac OSX directory name for installed targets.",  "codeSnippet": "INSTALL_NAME_DIR" },
{  "type": "property",  "label": "INSTALL_RPATH",  "documentationLabel": "The rpath to use for installed targets.",  "codeSnippet": "INSTALL_RPATH" },
{  "type": "property",  "label": "INSTALL_RPATH_USE_LINK_PATH",  "documentationLabel": "Add paths to linker search and installed rpath.",  "codeSnippet": "INSTALL_RPATH_USE_LINK_PATH" },
{  "type": "property",  "label": "INTERFACE_AUTOUIC_OPTIONS",  "documentationLabel": "List of interface options to pass to uic.",  "codeSnippet": "INTERFACE_AUTOUIC_OPTIONS" },
{  "type": "property",  "label": "INTERFACE_COMPILE_DEFINITIONS",  "documentationLabel": "",  "codeSnippet": "INTERFACE_COMPILE_DEFINITIONS" },
{  "type": "property",  "label": "INTERFACE_COMPILE_FEATURES",  "documentationLabel": "",  "codeSnippet": "INTERFACE_COMPILE_FEATURES" },
{  "type": "property",  "label": "INTERFACE_COMPILE_OPTIONS",  "documentationLabel": "",  "codeSnippet": "INTERFACE_COMPILE_OPTIONS" },
{  "type": "property",  "label": "INTERFACE_INCLUDE_DIRECTORIES",  "documentationLabel": "",  "codeSnippet": "INTERFACE_INCLUDE_DIRECTORIES" },
{  "type": "property",  "label": "INTERFACE_LINK_LIBRARIES",  "documentationLabel": "List public interface libraries for a library.",  "codeSnippet": "INTERFACE_LINK_LIBRARIES" },
{  "type": "property",  "label": "INTERFACE_POSITION_INDEPENDENT_CODE",  "documentationLabel": "Whether consumers need to create a position-independent target",  "codeSnippet": "INTERFACE_POSITION_INDEPENDENT_CODE" },
{  "type": "property",  "label": "INTERFACE_SOURCES",  "documentationLabel": "List of interface sources to compile into consuming targets.",  "codeSnippet": "INTERFACE_SOURCES" },
{  "type": "property",  "label": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",  "documentationLabel": "List of public system include directories for a library.",  "codeSnippet": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES" },
{  "type": "property",  "label": "INTERPROCEDURAL_OPTIMIZATION",  "documentationLabel": "Enable interprocedural optimization for targets in a directory.",  "codeSnippet": "INTERPROCEDURAL_OPTIMIZATION" },
{  "type": "property",  "label": "INTERPROCEDURAL_OPTIMIZATION",  "documentationLabel": "Enable interprocedural optimization for targets in a directory.",  "codeSnippet": "INTERPROCEDURAL_OPTIMIZATION" },
{  "type": "property",  "label": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",  "documentationLabel": "Per-configuration interprocedural optimization for a directory.",  "codeSnippet": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>" },
{  "type": "property",  "label": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",  "documentationLabel": "Per-configuration interprocedural optimization for a directory.",  "codeSnippet": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>" },
{  "type": "property",  "label": "IN_TRY_COMPILE",  "documentationLabel": "Read-only property that is true during a try-compile configuration.",  "codeSnippet": "IN_TRY_COMPILE" },
{  "type": "property",  "label": "JOB_POOLS",  "documentationLabel": "Ninja only: List of available pools.",  "codeSnippet": "JOB_POOLS" },
{  "type": "property",  "label": "JOB_POOL_COMPILE",  "documentationLabel": "Ninja only: Pool used for compiling.",  "codeSnippet": "JOB_POOL_COMPILE" },
{  "type": "property",  "label": "JOB_POOL_LINK",  "documentationLabel": "Ninja only: Pool used for linking.",  "codeSnippet": "JOB_POOL_LINK" },
{  "type": "property",  "label": "KEEP_EXTENSION",  "documentationLabel": "Make the output file have the same extension as the source file.",  "codeSnippet": "KEEP_EXTENSION" },
{  "type": "property",  "label": "LABELS",  "documentationLabel": "Specify a list of text labels associated with a source file.",  "codeSnippet": "LABELS" },
{  "type": "property",  "label": "LABELS",  "documentationLabel": "Specify a list of text labels associated with a source file.",  "codeSnippet": "LABELS" },
{  "type": "property",  "label": "LABELS",  "documentationLabel": "Specify a list of text labels associated with a source file.",  "codeSnippet": "LABELS" },
{  "type": "property",  "label": "LANGUAGE",  "documentationLabel": "What programming language is the file.",  "codeSnippet": "LANGUAGE" },
{  "type": "property",  "label": "LIBRARY_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory in which to build LIBRARY target files.",  "codeSnippet": "LIBRARY_OUTPUT_DIRECTORY" },
{  "type": "property",  "label": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for LIBRARY target files.",  "codeSnippet": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "property",  "label": "LIBRARY_OUTPUT_NAME",  "documentationLabel": "Output name for LIBRARY target files.",  "codeSnippet": "LIBRARY_OUTPUT_NAME" },
{  "type": "property",  "label": "LIBRARY_OUTPUT_NAME_<CONFIG>",  "documentationLabel": "Per-configuration output name for LIBRARY target files.",  "codeSnippet": "LIBRARY_OUTPUT_NAME_<CONFIG>" },
{  "type": "property",  "label": "LINKER_LANGUAGE",  "documentationLabel": "Specifies language whose compiler will invoke the linker.",  "codeSnippet": "LINKER_LANGUAGE" },
{  "type": "property",  "label": "LINK_DEPENDS",  "documentationLabel": "Additional files on which a target binary depends for linking.",  "codeSnippet": "LINK_DEPENDS" },
{  "type": "property",  "label": "LINK_DEPENDS_NO_SHARED",  "documentationLabel": "Do not depend on linked shared library files.",  "codeSnippet": "LINK_DEPENDS_NO_SHARED" },
{  "type": "property",  "label": "LINK_DIRECTORIES",  "documentationLabel": "List of linker search directories.",  "codeSnippet": "LINK_DIRECTORIES" },
{  "type": "property",  "label": "LINK_FLAGS",  "documentationLabel": "Additional flags to use when linking this target.",  "codeSnippet": "LINK_FLAGS" },
{  "type": "property",  "label": "LINK_FLAGS_<CONFIG>",  "documentationLabel": "Per-configuration linker flags for a target.",  "codeSnippet": "LINK_FLAGS_<CONFIG>" },
{  "type": "property",  "label": "LINK_INTERFACE_LIBRARIES",  "documentationLabel": "List public interface libraries for a shared library or executable.",  "codeSnippet": "LINK_INTERFACE_LIBRARIES" },
{  "type": "property",  "label": "LINK_INTERFACE_LIBRARIES_<CONFIG>",  "documentationLabel": "Per-configuration list of public interface libraries for a target.",  "codeSnippet": "LINK_INTERFACE_LIBRARIES_<CONFIG>" },
{  "type": "property",  "label": "LINK_INTERFACE_MULTIPLICITY",  "documentationLabel": "Repetition count for STATIC libraries with cyclic dependencies.",  "codeSnippet": "LINK_INTERFACE_MULTIPLICITY" },
{  "type": "property",  "label": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>",  "documentationLabel": "Per-configuration repetition count for cycles of STATIC libraries.",  "codeSnippet": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>" },
{  "type": "property",  "label": "LINK_LIBRARIES",  "documentationLabel": "List of direct link dependencies.",  "codeSnippet": "LINK_LIBRARIES" },
{  "type": "property",  "label": "LINK_SEARCH_END_STATIC",  "documentationLabel": "End a link line such that static system libraries are used.",  "codeSnippet": "LINK_SEARCH_END_STATIC" },
{  "type": "property",  "label": "LINK_SEARCH_START_STATIC",  "documentationLabel": "Assume the linker looks for static libraries by default.",  "codeSnippet": "LINK_SEARCH_START_STATIC" },
{  "type": "property",  "label": "LISTFILE_STACK",  "documentationLabel": "The current stack of listfiles being processed.",  "codeSnippet": "LISTFILE_STACK" },
{  "type": "property",  "label": "LOCATION",  "documentationLabel": "The full path to a source file.",  "codeSnippet": "LOCATION" },
{  "type": "property",  "label": "LOCATION",  "documentationLabel": "The full path to a source file.",  "codeSnippet": "LOCATION" },
{  "type": "property",  "label": "LOCATION_<CONFIG>",  "documentationLabel": "Read-only property providing a target location on disk.",  "codeSnippet": "LOCATION_<CONFIG>" },
{  "type": "property",  "label": "MACOSX_BUNDLE",  "documentationLabel": "Build an executable as an application bundle on Mac OS X.",  "codeSnippet": "MACOSX_BUNDLE" },
{  "type": "property",  "label": "MACOSX_BUNDLE_INFO_PLIST",  "documentationLabel": "Specify a custom Info.plist template for a Mac OS X App Bundle.",  "codeSnippet": "MACOSX_BUNDLE_INFO_PLIST" },
{  "type": "property",  "label": "MACOSX_FRAMEWORK_INFO_PLIST",  "documentationLabel": "Specify a custom Info.plist template for a Mac OS X Framework.",  "codeSnippet": "MACOSX_FRAMEWORK_INFO_PLIST" },
{  "type": "property",  "label": "MACOSX_PACKAGE_LOCATION",  "documentationLabel": "Place a source file inside a Mac OS X bundle, CFBundle, or framework.",  "codeSnippet": "MACOSX_PACKAGE_LOCATION" },
{  "type": "property",  "label": "MACOSX_RPATH",  "documentationLabel": "Whether to use rpaths on Mac OS X.",  "codeSnippet": "MACOSX_RPATH" },
{  "type": "property",  "label": "MACROS",  "documentationLabel": "List of macro commands available in the current directory.",  "codeSnippet": "MACROS" },
{  "type": "property",  "label": "MAP_IMPORTED_CONFIG_<CONFIG>",  "documentationLabel": "Map from project configuration to IMPORTED target's configuration.",  "codeSnippet": "MAP_IMPORTED_CONFIG_<CONFIG>" },
{  "type": "property",  "label": "MEASUREMENT",  "documentationLabel": "Specify a CDASH measurement and value to be reported for a test.",  "codeSnippet": "MEASUREMENT" },
{  "type": "property",  "label": "MODIFIED",  "documentationLabel": "Internal management property.  Do not set or get.",  "codeSnippet": "MODIFIED" },
{  "type": "property",  "label": "NAME",  "documentationLabel": "Logical name for the target.",  "codeSnippet": "NAME" },
{  "type": "property",  "label": "NO_SONAME",  "documentationLabel": "Whether to set 'soname' when linking a shared library or module.",  "codeSnippet": "NO_SONAME" },
{  "type": "property",  "label": "NO_SYSTEM_FROM_IMPORTED",  "documentationLabel": "Do not treat includes from IMPORTED target interfaces as SYSTEM.",  "codeSnippet": "NO_SYSTEM_FROM_IMPORTED" },
{  "type": "property",  "label": "OBJECT_DEPENDS",  "documentationLabel": "Additional files on which a compiled object file depends.",  "codeSnippet": "OBJECT_DEPENDS" },
{  "type": "property",  "label": "OBJECT_OUTPUTS",  "documentationLabel": "Additional outputs for a Makefile rule.",  "codeSnippet": "OBJECT_OUTPUTS" },
{  "type": "property",  "label": "OSX_ARCHITECTURES",  "documentationLabel": "Target specific architectures for OS X.",  "codeSnippet": "OSX_ARCHITECTURES" },
{  "type": "property",  "label": "OSX_ARCHITECTURES_<CONFIG>",  "documentationLabel": "Per-configuration OS X binary architectures for a target.",  "codeSnippet": "OSX_ARCHITECTURES_<CONFIG>" },
{  "type": "property",  "label": "OUTPUT_NAME",  "documentationLabel": "Output name for target files.",  "codeSnippet": "OUTPUT_NAME" },
{  "type": "property",  "label": "OUTPUT_NAME_<CONFIG>",  "documentationLabel": "Per-configuration target file base name.",  "codeSnippet": "OUTPUT_NAME_<CONFIG>" },
{  "type": "property",  "label": "PACKAGES_FOUND",  "documentationLabel": "List of packages which were found during the CMake run.",  "codeSnippet": "PACKAGES_FOUND" },
{  "type": "property",  "label": "PACKAGES_NOT_FOUND",  "documentationLabel": "List of packages which were not found during the CMake run.",  "codeSnippet": "PACKAGES_NOT_FOUND" },
{  "type": "property",  "label": "PARENT_DIRECTORY",  "documentationLabel": "Source directory that added current subdirectory.",  "codeSnippet": "PARENT_DIRECTORY" },
{  "type": "property",  "label": "PASS_REGULAR_EXPRESSION",  "documentationLabel": "The output must match this regular expression for the test to pass.",  "codeSnippet": "PASS_REGULAR_EXPRESSION" },
{  "type": "property",  "label": "PDB_NAME",  "documentationLabel": "Output name for the MS debug symbol ``.pdb`` file generated by the",  "codeSnippet": "PDB_NAME" },
{  "type": "property",  "label": "PDB_NAME_<CONFIG>",  "documentationLabel": "Per-configuration output name for the MS debug symbol ``.pdb`` file",  "codeSnippet": "PDB_NAME_<CONFIG>" },
{  "type": "property",  "label": "PDB_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory for the MS debug symbols ``.pdb`` file",  "codeSnippet": "PDB_OUTPUT_DIRECTORY" },
{  "type": "property",  "label": "PDB_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for the MS debug symbol ``.pdb`` file",  "codeSnippet": "PDB_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "property",  "label": "POSITION_INDEPENDENT_CODE",  "documentationLabel": "Whether to create a position-independent target",  "codeSnippet": "POSITION_INDEPENDENT_CODE" },
{  "type": "property",  "label": "POST_INSTALL_SCRIPT",  "documentationLabel": "Deprecated install support.",  "codeSnippet": "POST_INSTALL_SCRIPT" },
{  "type": "property",  "label": "PREDEFINED_TARGETS_FOLDER",  "documentationLabel": "Name of FOLDER for targets that are added automatically by CMake.",  "codeSnippet": "PREDEFINED_TARGETS_FOLDER" },
{  "type": "property",  "label": "PREFIX",  "documentationLabel": "What comes before the library name.",  "codeSnippet": "PREFIX" },
{  "type": "property",  "label": "PRE_INSTALL_SCRIPT",  "documentationLabel": "Deprecated install support.",  "codeSnippet": "PRE_INSTALL_SCRIPT" },
{  "type": "property",  "label": "PRIVATE_HEADER",  "documentationLabel": "Specify private header files in a FRAMEWORK shared library target.",  "codeSnippet": "PRIVATE_HEADER" },
{  "type": "property",  "label": "PROCESSORS",  "documentationLabel": "How many process slots this test requires",  "codeSnippet": "PROCESSORS" },
{  "type": "property",  "label": "PROJECT_LABEL",  "documentationLabel": "Change the name of a target in an IDE.",  "codeSnippet": "PROJECT_LABEL" },
{  "type": "property",  "label": "PUBLIC_HEADER",  "documentationLabel": "Specify public header files in a FRAMEWORK shared library target.",  "codeSnippet": "PUBLIC_HEADER" },
{  "type": "property",  "label": "REPORT_UNDEFINED_PROPERTIES",  "documentationLabel": "If set, report any undefined properties to this file.",  "codeSnippet": "REPORT_UNDEFINED_PROPERTIES" },
{  "type": "property",  "label": "REQUIRED_FILES",  "documentationLabel": "List of files required to run the test.",  "codeSnippet": "REQUIRED_FILES" },
{  "type": "property",  "label": "RESOURCE",  "documentationLabel": "Specify resource files in a FRAMEWORK shared library target.",  "codeSnippet": "RESOURCE" },
{  "type": "property",  "label": "RESOURCE_LOCK",  "documentationLabel": "Specify a list of resources that are locked by this test.",  "codeSnippet": "RESOURCE_LOCK" },
{  "type": "property",  "label": "RULE_LAUNCH_COMPILE",  "documentationLabel": "Specify a launcher for compile rules.",  "codeSnippet": "RULE_LAUNCH_COMPILE" },
{  "type": "property",  "label": "RULE_LAUNCH_COMPILE",  "documentationLabel": "Specify a launcher for compile rules.",  "codeSnippet": "RULE_LAUNCH_COMPILE" },
{  "type": "property",  "label": "RULE_LAUNCH_COMPILE",  "documentationLabel": "Specify a launcher for compile rules.",  "codeSnippet": "RULE_LAUNCH_COMPILE" },
{  "type": "property",  "label": "RULE_LAUNCH_CUSTOM",  "documentationLabel": "Specify a launcher for custom rules.",  "codeSnippet": "RULE_LAUNCH_CUSTOM" },
{  "type": "property",  "label": "RULE_LAUNCH_CUSTOM",  "documentationLabel": "Specify a launcher for custom rules.",  "codeSnippet": "RULE_LAUNCH_CUSTOM" },
{  "type": "property",  "label": "RULE_LAUNCH_CUSTOM",  "documentationLabel": "Specify a launcher for custom rules.",  "codeSnippet": "RULE_LAUNCH_CUSTOM" },
{  "type": "property",  "label": "RULE_LAUNCH_LINK",  "documentationLabel": "Specify a launcher for link rules.",  "codeSnippet": "RULE_LAUNCH_LINK" },
{  "type": "property",  "label": "RULE_LAUNCH_LINK",  "documentationLabel": "Specify a launcher for link rules.",  "codeSnippet": "RULE_LAUNCH_LINK" },
{  "type": "property",  "label": "RULE_LAUNCH_LINK",  "documentationLabel": "Specify a launcher for link rules.",  "codeSnippet": "RULE_LAUNCH_LINK" },
{  "type": "property",  "label": "RULE_MESSAGES",  "documentationLabel": "Specify whether to report a message for each make rule.",  "codeSnippet": "RULE_MESSAGES" },
{  "type": "property",  "label": "RUNTIME_OUTPUT_DIRECTORY",  "documentationLabel": "Output directory in which to build RUNTIME target files.",  "codeSnippet": "RUNTIME_OUTPUT_DIRECTORY" },
{  "type": "property",  "label": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",  "documentationLabel": "Per-configuration output directory for RUNTIME target files.",  "codeSnippet": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>" },
{  "type": "property",  "label": "RUNTIME_OUTPUT_NAME",  "documentationLabel": "Output name for RUNTIME target files.",  "codeSnippet": "RUNTIME_OUTPUT_NAME" },
{  "type": "property",  "label": "RUNTIME_OUTPUT_NAME_<CONFIG>",  "documentationLabel": "Per-configuration output name for RUNTIME target files.",  "codeSnippet": "RUNTIME_OUTPUT_NAME_<CONFIG>" },
{  "type": "property",  "label": "RUN_SERIAL",  "documentationLabel": "Do not run this test in parallel with any other test.",  "codeSnippet": "RUN_SERIAL" },
{  "type": "property",  "label": "SKIP_BUILD_RPATH",  "documentationLabel": "Should rpaths be used for the build tree.",  "codeSnippet": "SKIP_BUILD_RPATH" },
{  "type": "property",  "label": "SKIP_RETURN_CODE",  "documentationLabel": "Return code to mark a test as skipped.",  "codeSnippet": "SKIP_RETURN_CODE" },
{  "type": "property",  "label": "SOURCES",  "documentationLabel": "Source names specified for a target.",  "codeSnippet": "SOURCES" },
{  "type": "property",  "label": "SOVERSION",  "documentationLabel": "What version number is this target.",  "codeSnippet": "SOVERSION" },
{  "type": "property",  "label": "STATIC_LIBRARY_FLAGS",  "documentationLabel": "Extra flags to use when linking static libraries.",  "codeSnippet": "STATIC_LIBRARY_FLAGS" },
{  "type": "property",  "label": "STATIC_LIBRARY_FLAGS_<CONFIG>",  "documentationLabel": "Per-configuration flags for creating a static library.",  "codeSnippet": "STATIC_LIBRARY_FLAGS_<CONFIG>" },
{  "type": "property",  "label": "STRINGS",  "documentationLabel": "Enumerate possible STRING entry values for GUI selection.",  "codeSnippet": "STRINGS" },
{  "type": "property",  "label": "SUFFIX",  "documentationLabel": "What comes after the target name.",  "codeSnippet": "SUFFIX" },
{  "type": "property",  "label": "SYMBOLIC",  "documentationLabel": "Is this just a name for a rule.",  "codeSnippet": "SYMBOLIC" },
{  "type": "property",  "label": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS",  "documentationLabel": "Set if shared libraries may be named like archives.",  "codeSnippet": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS" },
{  "type": "property",  "label": "TARGET_SUPPORTS_SHARED_LIBS",  "documentationLabel": "Does the target platform support shared libraries.",  "codeSnippet": "TARGET_SUPPORTS_SHARED_LIBS" },
{  "type": "property",  "label": "TEST_INCLUDE_FILE",  "documentationLabel": "A cmake file that will be included when ctest is run.",  "codeSnippet": "TEST_INCLUDE_FILE" },
{  "type": "property",  "label": "TIMEOUT",  "documentationLabel": "How many seconds to allow for this test.",  "codeSnippet": "TIMEOUT" },
{  "type": "property",  "label": "TYPE",  "documentationLabel": "Widget type for entry in GUIs.",  "codeSnippet": "TYPE" },
{  "type": "property",  "label": "TYPE",  "documentationLabel": "Widget type for entry in GUIs.",  "codeSnippet": "TYPE" },
{  "type": "property",  "label": "USE_FOLDERS",  "documentationLabel": "Use the FOLDER target property to organize targets into folders.",  "codeSnippet": "USE_FOLDERS" },
{  "type": "property",  "label": "VALUE",  "documentationLabel": "Value of a cache entry.",  "codeSnippet": "VALUE" },
{  "type": "property",  "label": "VARIABLES",  "documentationLabel": "List of variables defined in the current directory.",  "codeSnippet": "VARIABLES" },
{  "type": "property",  "label": "VERSION",  "documentationLabel": "What version number is this target.",  "codeSnippet": "VERSION" },
{  "type": "property",  "label": "VISIBILITY_INLINES_HIDDEN",  "documentationLabel": "Whether to add a compile flag to hide symbols of inline functions",  "codeSnippet": "VISIBILITY_INLINES_HIDDEN" },
{  "type": "property",  "label": "VS_DEPLOYMENT_CONTENT",  "documentationLabel": "Mark a source file as content for deployment with a Windows Phone or",  "codeSnippet": "VS_DEPLOYMENT_CONTENT" },
{  "type": "property",  "label": "VS_DEPLOYMENT_LOCATION",  "documentationLabel": "Specifies the deployment location for a content source file with a Windows",  "codeSnippet": "VS_DEPLOYMENT_LOCATION" },
{  "type": "property",  "label": "VS_DOTNET_REFERENCES",  "documentationLabel": "Visual Studio managed project .NET references",  "codeSnippet": "VS_DOTNET_REFERENCES" },
{  "type": "property",  "label": "VS_DOTNET_TARGET_FRAMEWORK_VERSION",  "documentationLabel": "Specify the .NET target framework version.",  "codeSnippet": "VS_DOTNET_TARGET_FRAMEWORK_VERSION" },
{  "type": "property",  "label": "VS_GLOBAL_<variable>",  "documentationLabel": "Visual Studio project-specific global variable.",  "codeSnippet": "VS_GLOBAL_<variable>" },
{  "type": "property",  "label": "VS_GLOBAL_KEYWORD",  "documentationLabel": "Visual Studio project keyword for VS 10 (2010) and newer.",  "codeSnippet": "VS_GLOBAL_KEYWORD" },
{  "type": "property",  "label": "VS_GLOBAL_PROJECT_TYPES",  "documentationLabel": "Visual Studio project type(s).",  "codeSnippet": "VS_GLOBAL_PROJECT_TYPES" },
{  "type": "property",  "label": "VS_GLOBAL_ROOTNAMESPACE",  "documentationLabel": "Visual Studio project root namespace.",  "codeSnippet": "VS_GLOBAL_ROOTNAMESPACE" },
{  "type": "property",  "label": "VS_GLOBAL_SECTION_POST_<section>",  "documentationLabel": "Specify a postSolution global section in Visual Studio.",  "codeSnippet": "VS_GLOBAL_SECTION_POST_<section>" },
{  "type": "property",  "label": "VS_GLOBAL_SECTION_PRE_<section>",  "documentationLabel": "Specify a preSolution global section in Visual Studio.",  "codeSnippet": "VS_GLOBAL_SECTION_PRE_<section>" },
{  "type": "property",  "label": "VS_KEYWORD",  "documentationLabel": "Visual Studio project keyword for VS 9 (2008) and older.",  "codeSnippet": "VS_KEYWORD" },
{  "type": "property",  "label": "VS_SCC_AUXPATH",  "documentationLabel": "Visual Studio Source Code Control Aux Path.",  "codeSnippet": "VS_SCC_AUXPATH" },
{  "type": "property",  "label": "VS_SCC_LOCALPATH",  "documentationLabel": "Visual Studio Source Code Control Local Path.",  "codeSnippet": "VS_SCC_LOCALPATH" },
{  "type": "property",  "label": "VS_SCC_PROJECTNAME",  "documentationLabel": "Visual Studio Source Code Control Project.",  "codeSnippet": "VS_SCC_PROJECTNAME" },
{  "type": "property",  "label": "VS_SCC_PROVIDER",  "documentationLabel": "Visual Studio Source Code Control Provider.",  "codeSnippet": "VS_SCC_PROVIDER" },
{  "type": "property",  "label": "VS_SHADER_ENTRYPOINT",  "documentationLabel": "Specifies the name of the entry point for the shader of a ``.hlsl`` source",  "codeSnippet": "VS_SHADER_ENTRYPOINT" },
{  "type": "property",  "label": "VS_SHADER_FLAGS",  "documentationLabel": "Set additional VS shader flags of a ``.hlsl`` source file.",  "codeSnippet": "VS_SHADER_FLAGS" },
{  "type": "property",  "label": "VS_SHADER_MODEL",  "documentationLabel": "Specifies the shader model of a ``.hlsl`` source file. Some shader types can",  "codeSnippet": "VS_SHADER_MODEL" },
{  "type": "property",  "label": "VS_SHADER_TYPE",  "documentationLabel": "Set the VS shader type of a ``.hlsl`` source file.",  "codeSnippet": "VS_SHADER_TYPE" },
{  "type": "property",  "label": "VS_WINRT_COMPONENT",  "documentationLabel": "Mark a target as a Windows Runtime component for the Visual Studio generator.",  "codeSnippet": "VS_WINRT_COMPONENT" },
{  "type": "property",  "label": "VS_WINRT_EXTENSIONS",  "documentationLabel": "Deprecated.  Use ``VS_WINRT_COMPONENT`` instead.",  "codeSnippet": "VS_WINRT_EXTENSIONS" },
{  "type": "property",  "label": "VS_WINRT_REFERENCES",  "documentationLabel": "Visual Studio project Windows Runtime Metadata references",  "codeSnippet": "VS_WINRT_REFERENCES" },
{  "type": "property",  "label": "WILL_FAIL",  "documentationLabel": "If set to true, this will invert the pass/fail flag of the test.",  "codeSnippet": "WILL_FAIL" },
{  "type": "property",  "label": "WIN32_EXECUTABLE",  "documentationLabel": "Build an executable with a WinMain entry point on windows.",  "codeSnippet": "WIN32_EXECUTABLE" },
{  "type": "property",  "label": "WORKING_DIRECTORY",  "documentationLabel": "The directory from which the test executable will be called.",  "codeSnippet": "WORKING_DIRECTORY" },
{  "type": "property",  "label": "WRAP_EXCLUDE",  "documentationLabel": "Exclude this source file from any code wrapping techniques.",  "codeSnippet": "WRAP_EXCLUDE" },
{  "type": "property",  "label": "XCODE_ATTRIBUTE_<an-attribute>",  "documentationLabel": "Set Xcode target attributes directly.",  "codeSnippet": "XCODE_ATTRIBUTE_<an-attribute>" },
{  "type": "property",  "label": "XCODE_EXPLICIT_FILE_TYPE",  "documentationLabel": "Set the Xcode ``explicitFileType`` attribute on its reference to a",  "codeSnippet": "XCODE_EXPLICIT_FILE_TYPE" },
{  "type": "property",  "label": "XCODE_LAST_KNOWN_FILE_TYPE",  "documentationLabel": "Set the Xcode ``lastKnownFileType`` attribute on its reference to a",  "codeSnippet": "XCODE_LAST_KNOWN_FILE_TYPE" },

];});

